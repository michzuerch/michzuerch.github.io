<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="128"
   height="128"
   viewBox="0 0 33.866667 33.866667"
   version="1.1"
   id="svg1"
   inkscape:version="1.3.2 (091e20ef0f, 2023-11-25)"
   sodipodi:docname="logo.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:ns1="https://launchpad.net/jessyink">
  <title
     id="title14">Logo michzuerch@gmail.com</title>
  <sodipodi:namedview
     id="namedview1"
     pagecolor="#ffffff"
     bordercolor="#000000"
     borderopacity="0.25"
     inkscape:showpageshadow="2"
     inkscape:pageopacity="0.0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#d1d1d1"
     inkscape:document-units="mm"
     inkscape:zoom="2"
     inkscape:cx="21.5"
     inkscape:cy="15.75"
     inkscape:window-width="1910"
     inkscape:window-height="1029"
     inkscape:window-x="0"
     inkscape:window-y="0"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1"
     showgrid="false">
    <inkscape:page
       x="0"
       y="0"
       width="33.866669"
       height="33.866669"
       id="page67"
       margin="0"
       bleed="0" />
  </sodipodi:namedview>
  <defs
     id="defs1">
    <inkscape:path-effect
       effect="perspective-envelope"
       up_left_point="5.0830632,5.4383373"
       up_right_point="7.5489478,5.435711"
       down_left_point="4.9982886,6.7803648"
       down_right_point="7.6299312,6.7803648"
       id="path-effect13"
       is_visible="true"
       lpeversion="1"
       deform_type="perspective"
       horizontal_mirror="false"
       vertical_mirror="false"
       overflow_perspective="false" />
  </defs>
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1">
    <g
       id="g15"
       transform="matrix(1.0718033,0,0,1.0718033,-1.0186409,1.8057669)">
      <path
         style="font-variation-settings:'opsz' 25, 'wght' 300;fill:#ff3300;stroke:#000000;stroke-width:0.151778;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1"
         d="M 8.5337945,14.307732 H 1.3233525 L 2.4147547,16.52544 1.3444804,18.727069 H 10.069179 L 9.4480843,17.810181 8.9039021,16.540637 8.6604646,15.501589 Z"
         id="path13" />
      <path
         id="rect28"
         style="font-variation-settings:'opsz' 25, 'wght' 300;fill:none;stroke:#000000;stroke-width:0.23773;stroke-linecap:round;stroke-linejoin:round"
         inkscape:label="banner"
         d="M 9.9600334,18.732409 H 1.3429535 L 2.403317,16.521595 1.3429535,14.31078 v 0 h 7.072509"
         sodipodi:nodetypes="cccccc" />
      <g
         id="g14">
        <path
           style="font-variation-settings:'opsz' 25, 'wght' 300;fill:#ff3300;stroke:#000000;stroke-width:0.151778;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1"
           d="m 24.964844,14.312781 h 7.210441 l -1.0914,2.217708 1.070272,2.201629 h -8.724698 l 0.621095,-0.916888 0.544182,-1.269544 0.243437,-1.039048 z"
           id="path14" />
        <path
           id="path2"
           style="font-variation-settings:'opsz' 25, 'wght' 300;fill:none;stroke:none;stroke-width:0.274725"
           d="m 9.0181783,21.714825 a 10.936263,10.74901 0 0 0 15.4662117,0 10.936263,10.74901 0 0 0 0,-15.2013964 10.936263,10.74901 0 0 0 -15.4662117,0 10.936263,10.74901 0 0 0 0,15.2013964 z"
           inkscape:label="upperfontcircle" />
        <ellipse
           style="fill:none;stroke:none;stroke-width:0.298035;stroke-dasharray:none;stroke-opacity:1"
           id="path1"
           cx="-19.05183"
           cy="-10.926479"
           transform="matrix(-0.98421064,-0.17700119,0.18301687,-0.98310977,0,0)"
           inkscape:label="lowerfontcircle"
           rx="8.9823122"
           ry="8.8384008" />
        <path
           style="font-size:0.788349px;line-height:0.190518em;font-family:'DM Sans';-inkscape-font-specification:'DM Sans, @opsz=40.0,wght=300';font-variation-settings:'opsz' 40, 'wght' 300;letter-spacing:0.00946019px;stroke:#070001;stroke-width:0.0334558"
           d="m 7.8858631,12.418934 -1.1314202,-0.332897 0.043709,-0.143467 0.1970748,0.03844 0.00273,-0.009 q -0.080099,-0.07975 -0.1150539,-0.185296 -0.034955,-0.10555 0.00601,-0.24005 0.021856,-0.07173 0.062873,-0.132945 0.041703,-0.06345 0.1112412,-0.104059 0.070222,-0.04285 0.1776381,-0.05277 l 0.00273,-0.009 Q 7.1429999,11.1695 7.1105467,11.047585 q -0.031773,-0.124154 0.0058,-0.247447 0.036196,-0.118812 0.1166627,-0.195284 0.08115,-0.07872 0.2070314,-0.100301 0.123602,-0.02225 0.2924036,0.02741 L 8.4008053,10.72868 8.3529985,10.8856 7.7028879,10.694319 q -0.1870513,-0.05503 -0.3008303,-0.0079 -0.113782,0.04713 -0.154759,0.181633 -0.027988,0.09191 -0.00789,0.18088 0.018517,0.08606 0.087664,0.152813 0.069144,0.06675 0.1900414,0.102326 l 0.65012,0.191276 -0.047807,0.156921 -0.6501106,-0.191281 q -0.1870513,-0.05504 -0.3008303,-0.0079 -0.1137819,0.04713 -0.154759,0.181633 -0.027988,0.09191 -0.00104,0.182893 0.027624,0.08874 0.1104763,0.159522 0.082828,0.07078 0.2242552,0.112394 l 0.5862399,0.17249 z M 8.5406761,10.520107 7.4662425,10.038212 7.5354466,9.8891959 8.6098802,10.371091 Z M 7.2560647,9.8539175 q -0.020763,0.044705 -0.068082,0.062062 -0.047324,0.017363 -0.09498,-0.00401 -0.049823,-0.022342 -0.066306,-0.06575 -0.015481,-0.045533 0.00625,-0.092366 0.020763,-0.044705 0.065917,-0.063033 0.045154,-0.018335 0.097144,0.00498 0.045491,0.020399 0.063155,0.066907 0.017667,0.046508 -0.0031,0.091213 z M 9.0084727,9.684014 Q 8.9263,9.823832 8.7936277,9.8998546 8.6600842,9.9726808 8.5011907,9.97167 8.3414291,9.9674505 8.1805983,9.8761742 8.017707,9.783717 7.9362234,9.6509932 7.8559328,9.5162445 7.8554501,9.3673472 7.8540978,9.2152503 7.9362689,9.0754323 8.0398787,8.899142 8.201738,8.8342812 8.3647902,8.7673956 8.5364251,8.8215622 l -0.083363,0.1418427 q -0.1161953,-0.036226 -0.2218844,0.017272 -0.1044993,0.05148 -0.1711906,0.1649555 -0.0524,0.089158 -0.052612,0.1971295 -0.00227,0.1068001 0.058677,0.2089529 0.062141,0.100128 0.2002924,0.1785396 0.1030969,0.058517 0.1981191,0.074623 0.094154,0.012901 0.1763449,-0.00528 0.081323,-0.021401 0.1450422,-0.069001 0.061661,-0.048772 0.1009598,-0.1156397 0.044064,-0.074975 0.05624,-0.1518358 0.011292,-0.080057 -0.01111,-0.1495288 -0.021219,-0.071497 -0.082995,-0.125475 L 8.932308,9.0462727 Q 9.0629039,9.160932 9.0874889,9.3343233 9.112077,9.5077116 9.0084642,9.6840031 Z M 9.359462,9.0647523 8.0459213,8.0564001 l 0.093811,-0.1180226 0.5629462,0.4321511 0.00586,-0.00738 Q 8.6501239,8.2351698 8.6624908,8.1169833 8.6729635,7.9973548 8.7579957,7.8903937 8.8430157,7.7834357 8.9492027,7.7372739 9.0553897,7.691109 9.18064,7.7159946 9.3040144,7.7394291 9.4428732,7.8460381 L 9.9926873,8.2680875 9.8900822,8.3971748 9.3552835,7.9866314 Q 9.2014109,7.8685085 9.0750495,7.8754326 8.9501513,7.880502 8.8548741,8.0003794 q -0.065963,0.082983 -0.077446,0.1810652 -0.011474,0.098076 0.036545,0.1973055 0.049495,0.097384 0.1658389,0.1866962 l 0.4822567,0.3702196 z m 0.752892,-0.9206005 -0.09727,-0.09635 -0.1588732,-1.097663 -0.4699339,0.4581565 -0.097266,-0.096353 0.6017856,-0.5867038 0.097266,0.096352 0.1588725,1.0976627 0.486838,-0.4746366 0.09727,0.096352 z m 1.125733,-0.9712466 q -0.107568,0.081338 -0.224,0.1014727 -0.114544,0.018699 -0.228083,-0.034211 -0.11499,-0.054771 -0.222443,-0.1920085 l -0.425455,-0.5433872 0.132102,-0.099891 0.413838,0.5285506 q 0.11907,0.1520725 0.243203,0.1763115 0.124133,0.024254 0.244909,-0.067092 0.08681,-0.065641 0.120913,-0.1563861 0.03599,-0.092175 0.01275,-0.1986047 -0.0228,-0.1097143 -0.111384,-0.2228437 l -0.37318,-0.4766227 0.132102,-0.099891 0.720223,0.9198638 -0.120776,0.091328 -0.135185,-0.145795 -0.0076,0.00571 q 0.01773,0.1224121 -0.02523,0.2287114 -0.04296,0.1062993 -0.146752,0.1847838 z m 1.099701,-0.7218003 q -0.144885,0.08098 -0.294326,0.078363 -0.150615,-0.00467 -0.283057,-0.086765 -0.133616,-0.084149 -0.226613,-0.2448364 -0.093,-0.1606905 -0.09918,-0.3133714 -0.0041,-0.1538392 0.07205,-0.2825562 0.07617,-0.12872 0.223123,-0.2108562 0.149025,-0.083296 0.293429,-0.07517 0.14323,0.00607 0.26033,0.080624 0.117097,0.074535 0.187731,0.19658 0.01178,0.020338 0.02471,0.042716 0.01296,0.022372 0.02735,0.052005 L 11.664395,6.1679391 11.593765,6.0458959 12.31405,5.643305 q -0.09214,-0.1450149 -0.235617,-0.1751944 -0.143476,-0.030174 -0.28422,0.048487 -0.09314,0.05206 -0.150318,0.1378571 -0.05717,0.085797 -0.06094,0.1928917 -0.0049,0.1050578 0.06216,0.2209981 l 0.03178,0.054919 q 0.07887,0.1362815 0.183588,0.198893 0.103543,0.060578 0.210161,0.060207 0.10751,-0.00355 0.196513,-0.053305 0.115907,-0.064785 0.163954,-0.1616315 0.04805,-0.096847 0.02702,-0.2089226 l 0.140744,-0.078667 q 0.02814,0.105416 0.01047,0.2121888 -0.01764,0.1067759 -0.08399,0.2003927 -0.06753,0.091583 -0.187574,0.158684 z M 12.962579,6.100271 12.49341,5.0351274 l 0.139854,-0.059494 0.102678,0.2036559 0.0087,-0.0037 q 0.0019,-0.090035 0.03378,-0.1648128 0.03411,-0.07571 0.100484,-0.1370891 0.06637,-0.061379 0.164703,-0.1032121 l 0.06905,0.1567655 -0.04152,0.017667 q -0.0743,0.031606 -0.133522,0.079747 -0.05799,0.045066 -0.08838,0.1115447 -0.03134,0.06433 -0.02881,0.1525067 0.0037,0.085096 0.05199,0.194619 l 0.243097,0.5518989 z m 1.170429,-0.4073212 q -0.156966,0.047704 -0.306867,0.014874 -0.148333,-0.03575 -0.264203,-0.1426016 -0.114301,-0.1097751 -0.169169,-0.2841529 -0.05557,-0.1766121 -0.02359,-0.328396 0.03427,-0.1524763 0.136874,-0.2620388 0.104177,-0.1124889 0.26114,-0.1601897 0.197913,-0.060147 0.361509,3.582e-4 0.165872,0.059813 0.254329,0.2141832 l -0.15924,0.048393 Q 14.163599,4.689205 14.049061,4.6578811 13.9368,4.625865 13.809406,4.6645896 13.709315,4.695009 13.6345,4.7740793 q -0.07551,0.076836 -0.101433,0.192482 -0.02365,0.1149568 0.02349,0.2647436 0.03517,0.1117785 0.09375,0.1870513 0.06015,0.072347 0.133036,0.1138791 0.07446,0.038606 0.154122,0.046238 0.07896,0.0054 0.15403,-0.017424 0.08417,-0.02559 0.146247,-0.073837 0.06365,-0.051186 0.09524,-0.1171211 0.03387,-0.066628 0.02589,-0.1474737 l 0.159239,-0.048393 q 0.01651,0.1713302 -0.08533,0.314956 -0.101858,0.1436246 -0.299767,0.2037713 z m 0.685698,-0.2199295 -0.266437,-1.6169557 0.150433,-0.023951 0.114189,0.6929812 0.0094,-0.0015 q 0.04564,-0.1328999 0.136436,-0.211351 0.09042,-0.080764 0.226745,-0.1024594 0.13633,-0.021704 0.246156,0.01536 0.109824,0.037043 0.184511,0.1389438 0.0743,0.099591 0.102468,0.2705232 l 0.111524,0.6768117 -0.164537,0.026167 -0.108479,-0.6583322 q -0.03121,-0.189413 -0.128704,-0.2687201 -0.09514,-0.079681 -0.247927,-0.055366 -0.105774,0.016817 -0.182018,0.081116 -0.07624,0.064284 -0.10962,0.1691597 -0.03102,0.1044962 -0.0074,0.2477141 l 0.09782,0.593654 z m 2.094904,0.263587 q -0.249823,-0.00968 -0.436318,-0.112932 -0.184207,-0.1008171 -0.284235,-0.2803342 -0.09774,-0.1770856 -0.08826,-0.4132454 0.0098,-0.2455102 0.104053,-0.4549676 0.09657,-0.2093628 0.259993,-0.3622729 0.163511,-0.1552477 0.381213,-0.2357964 0.217701,-0.080549 0.472286,-0.070677 0.26172,0.010139 0.4505,0.115825 0.188778,0.105677 0.286426,0.2851 0.09765,0.179426 0.08835,0.4109073 -0.0053,0.1332764 -0.04382,0.2605879 -0.03609,0.1273995 -0.104557,0.230129 -0.06837,0.1003891 -0.161319,0.1600166 -0.09285,0.057287 -0.211818,0.052673 -0.138,-0.00534 -0.1941,-0.091832 -0.05372,-0.086392 -0.03419,-0.2167756 l 0.01281,-0.081468 0.03582,0.057594 q -0.06787,0.147246 -0.204679,0.2309304 -0.134333,0.081441 -0.288986,0.075446 -0.180825,-0.00701 -0.278816,-0.1185387 -0.09552,-0.1137699 -0.08819,-0.2961495 0.0052,-0.1286016 0.0503,-0.2439438 0.04761,-0.1175886 0.127412,-0.2058263 0.07989,-0.090575 0.186738,-0.1402946 0.109229,-0.049625 0.237709,-0.044647 0.149893,0.00583 0.234737,0.088723 0.08722,0.083004 0.09539,0.2355415 l -0.04871,0.026197 0.06721,-0.30886 0.145136,0.00565 -0.148661,0.6757135 q -0.02079,0.1022347 0.0051,0.1688106 0.02592,0.066579 0.116338,0.070085 0.0809,0.00316 0.144918,-0.048244 0.06411,-0.05372 0.10813,-0.1410019 0.04649,-0.089528 0.07213,-0.1939208 0.02565,-0.1043869 0.02957,-0.2025934 0.0084,-0.2081 -0.07605,-0.3612517 -0.08202,-0.1530591 -0.245383,-0.2390171 -0.160884,-0.088201 -0.391675,-0.09715 -0.216514,-0.00841 -0.40529,0.063908 -0.186396,0.072395 -0.330121,0.2096754 -0.141254,0.135034 -0.224993,0.3214764 -0.08127,0.1841949 -0.0899,0.3993118 -0.0086,0.2127778 0.07348,0.3658357 0.08431,0.1554906 0.245382,0.2390171 0.163359,0.085958 0.38939,0.094719 0.09993,0.00389 0.203082,-0.013205 0.103061,-0.014753 0.192692,-0.051073 l 0.02155,0.1155881 q -0.106378,0.03803 -0.223809,0.054552 -0.115051,0.016635 -0.234014,0.01199 z m 0.09191,-0.5678472 q 0.107067,0.00416 0.199734,-0.04846 0.09267,-0.052612 0.153712,-0.1486029 0.06352,-0.098237 0.08305,-0.2286204 0.01581,-0.097745 -0.007,-0.1805947 -0.02289,-0.082853 -0.08525,-0.1321076 -0.06227,-0.051596 -0.166959,-0.055651 -0.09755,-0.00376 -0.17785,0.037598 -0.08021,0.039043 -0.137839,0.1094077 -0.05754,0.068024 -0.08975,0.1581073 -0.03212,0.087746 -0.03597,0.183612 -0.0053,0.1332794 0.06036,0.2177895 0.06818,0.082267 0.203805,0.087524 z m 1.773011,0.8493853 Q 18.62603,5.9808354 18.51566,5.9128387 18.4076,5.8454067 18.356688,5.7557848 q -0.04918,-0.086787 -0.02444,-0.1844256 0.01093,-0.043144 0.04091,-0.093684 0.02999,-0.050542 0.09288,-0.095438 0.0629,-0.044899 0.166832,-0.067699 l 0.120208,0.087284 q -0.134533,0.027381 -0.18415,0.077932 -0.04962,0.050557 -0.06629,0.1164108 -0.01497,0.059039 0.01108,0.111226 0.02547,0.054458 0.0977,0.098656 0.07454,0.044765 0.201628,0.075853 0.127084,0.03109 0.208501,0.01964 0.08084,-0.00917 0.122961,-0.049495 0.04386,-0.037501 0.05651,-0.087458 0.01958,-0.077204 -0.03076,-0.1497989 -0.05032,-0.072598 -0.221311,-0.1240756 -0.138646,-0.043566 -0.227618,-0.079802 -0.08609,-0.037942 -0.140987,-0.073075 -0.05201,-0.03684 -0.08265,-0.070862 -0.03005,-0.036293 -0.05725,-0.074292 l 0.01381,-0.054498 0.271856,-0.1529346 0.08901,0.07483 -0.198511,0.1539971 0.01439,-0.056768 q 0.02025,0.026652 0.03932,0.048202 0.01967,0.019276 0.05606,0.040239 0.03698,0.018699 0.105732,0.04757 0.07164,0.027168 0.194109,0.066779 0.151936,0.049228 0.233428,0.1149841 0.08381,0.066321 0.106989,0.1491584 0.02607,0.081132 0.0025,0.1742322 -0.01897,0.074933 -0.09226,0.1414086 -0.07328,0.066473 -0.200302,0.093271 -0.124716,0.027381 -0.29801,-0.015026 z m 0.208212,-0.841297 q -0.145567,-0.035613 -0.234005,-0.1127135 -0.08555,-0.078803 -0.115685,-0.1826346 -0.03014,-0.1038284 -0.0025,-0.2128233 0.02817,-0.1112655 0.103762,-0.1868237 0.07615,-0.077829 0.188739,-0.1057468 0.115473,-0.029627 0.26104,0.00601 0.145567,0.035613 0.231119,0.1144164 0.08844,0.0771 0.116262,0.180364 0.03071,0.1015578 0.0025,0.2128233 -0.02759,0.1089949 -0.103765,0.1868237 -0.07384,0.07839 -0.189312,0.1080144 -0.112586,0.027927 -0.258154,-0.00768 z m 0.03452,-0.1362421 q 0.131703,0.032222 0.225211,-0.017242 0.09582,-0.048903 0.127454,-0.173792 0.03221,-0.1271597 -0.02966,-0.2122314 -0.059,-0.086778 -0.1907,-0.1189971 -0.134014,-0.032787 -0.229832,0.016119 -0.09293,0.047194 -0.125144,0.1743566 -0.03164,0.1248891 0.02735,0.2116667 0.06131,0.087342 0.195321,0.1201294 z m 0.307946,-0.4407106 -0.02325,-0.1600257 0.473674,0.1158826 -0.02759,0.1089949 z m 0.353599,1.1178298 0.491782,-1.0552465 0.138552,0.06236 -0.06596,0.1865049 0.0087,0.00389 q 0.09143,-0.066943 0.202636,-0.086386 0.111202,-0.019428 0.241094,0.039022 0.06928,0.031178 0.125299,0.079559 0.05819,0.049352 0.08951,0.1226458 0.03348,0.074265 0.02862,0.180185 l 0.0087,0.00389 q 0.09287,-0.086887 0.220221,-0.1016367 0.129512,-0.013781 0.248579,0.039817 0.114738,0.051641 0.180695,0.1405223 0.06812,0.089859 0.07249,0.215361 0.0053,0.1233774 -0.06801,0.2808168 l -0.29051,0.6233613 -0.151541,-0.068209 0.282577,-0.6063411 q 0.08131,-0.1744569 0.04952,-0.2917115 -0.03178,-0.1172547 -0.161677,-0.1757196 -0.08876,-0.039951 -0.181204,-0.032657 -0.08929,0.00613 -0.166116,0.064217 -0.07683,0.058076 -0.129375,0.1708354 L 20.574758,6.1191385 20.423217,6.0509294 20.705794,5.444588 q 0.08131,-0.1744568 0.04952,-0.2917115 -0.03178,-0.1172546 -0.161677,-0.1757196 -0.08876,-0.039951 -0.18418,-0.026258 -0.09326,0.014662 -0.176029,0.085494 -0.08278,0.070844 -0.14425,0.2027483 L 19.834357,5.785934 Z m 2.12098,1.1242979 q -0.121256,-0.082759 -0.172918,-0.1778475 -0.0503,-0.097008 -0.04188,-0.1909764 0.0084,-0.093966 0.06411,-0.172769 0.07063,-0.099946 0.170972,-0.1311727 0.101703,-0.033151 0.221981,-0.00234 0.120281,0.030808 0.24545,0.1162348 l 0.265982,0.1815327 q 0.06384,-0.090332 0.07737,-0.1751156 0.01548,-0.083448 -0.01815,-0.1548319 -0.03362,-0.071384 -0.117722,-0.1287776 -0.1017,-0.069408 -0.212689,-0.068236 -0.109633,-7.504e-4 -0.196504,0.085257 l -0.144721,-0.098774 q 0.08508,-0.095781 0.194604,-0.1235929 0.112841,-0.028413 0.227251,-0.0016 0.115774,0.024861 0.213561,0.091622 0.134946,0.092099 0.185685,0.2008024 0.05269,0.1100361 0.03324,0.2278129 -0.01809,0.1158553 -0.09959,0.2311733 l -0.414262,0.5862077 -0.125169,-0.085427 0.116104,-0.1971112 -0.0078,-0.00534 q -0.04808,0.027017 -0.104581,0.045433 -0.0565,0.018426 -0.115989,0.020551 -0.05753,0.00346 -0.120609,-0.013964 -0.06112,-0.016058 -0.123702,-0.058787 z m 0.0979,-0.1098206 q 0.06845,0.046717 0.142826,0.060441 0.07769,0.013144 0.152716,-0.00689 0.07698,-0.018669 0.14799,-0.069939 0.07236,-0.053174 0.130769,-0.1358201 v 0 L 22.219778,6.4051362 q -0.105611,-0.07208 -0.187811,-0.09114 -0.08024,-0.017728 -0.139456,0.00455 -0.05591,0.021674 -0.09394,0.075491 -0.03803,0.053814 -0.04113,0.1115296 -0.0011,0.059048 0.03341,0.1168175 0.03651,0.059102 0.110825,0.1098236 z m 0.567492,0.5659081 0.759789,-0.888592 0.127609,0.1053771 -0.759789,0.8885923 z m 0.996691,-1.0383448 q -0.03829,-0.031612 -0.04265,-0.081065 -0.0044,-0.049455 0.02932,-0.088866 0.03523,-0.041205 0.0822,-0.045209 0.04879,-0.0025 0.0889,0.030617 0.03829,0.031612 0.04418,0.079277 0.0059,0.047661 -0.03087,0.09066 -0.03217,0.037623 -0.08249,0.041915 -0.05032,0.00431 -0.0886,-0.02732 z m -0.667297,1.3187272 1.132878,-1.2015092 0.12226,0.1113322 -1.132877,1.2015093 z m 0.35666,0.3540993 q -0.03671,-0.036727 -0.03626,-0.086365 0.0021,-0.047968 0.03949,-0.084043 0.03737,-0.036075 0.08451,-0.035662 0.05051,4.444e-4 0.08722,0.037171 0.03504,0.035058 0.03292,0.083026 0.0012,0.047995 -0.03782,0.085712 -0.03567,0.034435 -0.08618,0.033989 -0.04884,0.00123 -0.08388,-0.033828 z m 0.567449,0.6505726 Q 23.61907,8.4578602 23.594115,8.3089386 23.572535,8.1603569 23.630135,8.0148381 23.691105,7.8696563 23.835251,7.7545508 23.98124,7.63797 24.13647,7.6104921 q 0.156735,-0.025681 0.298456,0.027017 0.145073,0.052998 0.248689,0.1783059 0.130641,0.1579949 0.134578,0.3297328 0.0054,0.1735552 -0.107282,0.3118127 L 24.605785,8.3302367 q 0.07588,-0.093763 0.0627,-0.2098788 -0.01166,-0.1143011 -0.09577,-0.2160015 -0.06607,-0.079905 -0.168641,-0.1186055 -0.100723,-0.040176 -0.219571,-0.020672 -0.117349,0.02134 -0.241161,0.1202204 -0.0924,0.073785 -0.141596,0.1552873 -0.04585,0.081842 -0.05785,0.1637959 -0.0087,0.082294 0.01387,0.1577763 0.02438,0.074004 0.07393,0.1339351 0.05556,0.067192 0.124288,0.1057833 0.07208,0.038928 0.14611,0.043126 0.07554,0.00604 0.148879,-0.031451 l 0.105116,0.1271233 q -0.155576,0.07901 -0.329178,0.039748 Q 23.85331,8.7411585 23.722667,8.583166 Z m 0.715211,1.0073623 q -0.08435,-0.1385552 -0.08742,-0.289453 -0.0019,-0.1488883 0.07632,-0.284839 0.08143,-0.1351432 0.242863,-0.2300531 0.163468,-0.096112 0.322325,-0.099527 0.158857,-0.0034 0.292704,0.070595 0.133847,0.074007 0.2182,0.2125653 0.08557,0.1405647 0.08742,0.289453 0.0018,0.1488883 -0.07754,0.2828294 -0.07817,0.1359477 -0.24164,0.2320597 -0.161425,0.09491 -0.322324,0.099527 -0.158857,0.0034 -0.292705,-0.070595 -0.132626,-0.071997 -0.218202,-0.2125622 z m 0.1226,-0.072086 q 0.05623,0.092372 0.148867,0.144256 0.0959,0.052691 0.216366,0.050029 0.122513,-0.00386 0.257373,-0.083153 0.136907,-0.080494 0.196247,-0.1835574 0.06057,-0.1010539 0.05662,-0.2078085 -6.8e-4,-0.1059472 -0.05569,-0.1963098 -0.05501,-0.090363 -0.150907,-0.143057 -0.09385,-0.05389 -0.214325,-0.051231 -0.12047,0.00266 -0.257374,0.083153 -0.134861,0.079292 -0.197472,0.1815479 -0.05935,0.1030634 -0.05867,0.2090106 0.0039,0.1067546 0.05896,0.1971172 z m 0.310347,0.7078455 1.107673,-0.4027081 0.05288,0.1404585 -0.18098,0.085758 0.0033,0.0088 q 0.112799,0.01639 0.205317,0.08005 0.09252,0.06367 0.142088,0.195351 0.02644,0.07023 0.03113,0.143375 0.0055,0.07534 -0.0252,0.148883 -0.02987,0.07573 -0.109633,0.147145 l 0.0033,0.0088 q 0.128183,0.0033 0.228717,0.08152 0.101358,0.08042 0.1468,0.201121 0.04379,0.116317 0.02632,0.224972 -0.01666,0.11085 -0.104031,0.20249 -0.08513,0.09083 -0.250392,0.150913 l -0.65433,0.237888 -0.05783,-0.153627 0.636466,-0.231394 q 0.183123,-0.06658 0.245188,-0.171476 0.06207,-0.104903 0.01251,-0.23658 -0.03387,-0.08998 -0.104393,-0.149174 -0.06746,-0.05781 -0.163557,-0.07028 -0.09609,-0.01248 -0.214453,0.03056 l -0.636471,0.231383 -0.05783,-0.153627 0.636465,-0.231395 q 0.183124,-0.06658 0.245189,-0.171476 0.06206,-0.104903 0.01251,-0.236579 -0.03388,-0.08998 -0.111101,-0.146739 -0.0764,-0.05456 -0.185886,-0.06216 -0.109493,-0.0076 -0.247951,0.04274 l -0.573935,0.208662 z"
           id="text4"
           inkscape:label="company"
           aria-label="michzuerch@gmail.com" />
        <path
           d="M 9.4266517,22.137317 Q 9.3150371,22.038319 9.26125,21.921972 9.2093844,21.807334 9.2178324,21.687851 9.228214,21.570074 9.305038,21.459774 l 0.1404797,0.124601 q -0.037079,0.0632 -0.046043,0.137614 -0.00531,0.07422 0.026379,0.153806 0.033418,0.07769 0.1123158,0.147668 0.073127,0.06486 0.1384125,0.08502 0.065289,0.02016 0.1213739,0.0047 0.056088,-0.01548 0.09603,-0.05896 0.055572,-0.06053 0.054303,-0.119993 0.00239,-0.05965 -0.037784,-0.126173 -0.040179,-0.06652 -0.1051853,-0.151638 -0.047312,-0.06256 -0.089412,-0.130784 -0.040364,-0.07012 -0.062426,-0.141166 -0.020338,-0.07294 -0.00753,-0.143935 0.01281,-0.07099 0.070122,-0.133416 0.074675,-0.08133 0.1706593,-0.10601 0.097718,-0.02656 0.2040321,0.0059 0.109969,0.03234 0.211964,0.122804 0.146254,0.129722 0.172818,0.287125 0.03023,0.157217 -0.08289,0.310839 l -0.136631,-0.121188 q 0.0635,-0.08438 0.04745,-0.180978 -0.01603,-0.0966 -0.11227,-0.181945 -0.09237,-0.08193 -0.178874,-0.08659 -0.084765,-0.0066 -0.1455458,0.05965 -0.036469,0.03972 -0.035577,0.09199 0.00282,0.05397 0.035671,0.120867 0.034778,0.0686 0.09209,0.146885 0.070968,0.09383 0.1218958,0.190478 0.05459,0.09646 0.05426,0.195694 0.0033,0.09905 -0.09045,0.201182 -0.074486,0.08493 -0.1795289,0.111872 -0.1013787,0.02674 -0.2169365,-0.0071 -0.1118969,-0.03404 -0.2215869,-0.131337 z m 1.0738773,0.834236 q -0.146988,-0.100159 -0.219022,-0.248446 -0.0699,-0.146836 -0.05455,-0.316179 0.01897,-0.169985 0.135638,-0.335392 0.11815,-0.167502 0.274105,-0.241039 0.155955,-0.07354 0.32251,-0.05925 0.166555,0.01427 0.313542,0.114447 0.149116,0.101609 0.219022,0.248446 0.0699,0.146836 0.05241,0.314727 -0.01536,0.169339 -0.133507,0.336844 -0.116672,0.16541 -0.274105,0.241038 -0.155955,0.07354 -0.32251,0.05925 -0.164424,-0.01281 -0.313542,-0.114447 z m 0.08861,-0.125627 q 0.09799,0.06677 0.213564,0.07732 0.119179,0.0099 0.237417,-0.04593 0.119714,-0.05793 0.217189,-0.196122 0.09895,-0.140282 0.110673,-0.268699 0.01387,-0.126965 -0.03886,-0.231088 -0.04911,-0.104769 -0.144972,-0.170089 -0.09586,-0.06532 -0.215043,-0.07523 -0.1177,-0.01199 -0.235939,0.04384 -0.118238,0.05584 -0.217188,0.196121 -0.09747,0.138188 -0.112805,0.267248 -0.01172,0.128417 0.03739,0.233186 0.05272,0.104126 0.148582,0.169445 z m 0.831702,0.655214 0.702737,-1.280333 q 0.05415,-0.09866 0.120551,-0.144511 0.06991,-0.04688 0.153302,-0.04319 0.08567,0.0049 0.186047,0.05812 l 0.111785,0.05927 -0.07384,0.134536 -0.08669,-0.04597 q -0.09125,-0.04839 -0.149726,-0.03308 -0.05619,0.01654 -0.105422,0.106215 l -0.699044,1.273611 z m 0.36321,-1.06956 0.07384,-0.134536 0.622802,0.330231 -0.07384,0.134537 z m 0.776141,1.612555 q -0.102223,-0.04368 -0.162482,-0.105538 -0.05923,-0.0642 -0.06657,-0.156234 -0.0049,-0.09102 0.05084,-0.217191 l 0.300715,-0.67993 -0.204442,-0.08735 0.062,-0.140191 0.204442,0.08735 0.142611,-0.258542 0.142632,0.06094 -0.118839,0.268702 0.356585,0.152352 -0.062,0.140191 -0.356584,-0.152352 -0.300715,0.67993 q -0.05167,0.116826 -0.02271,0.179198 0.03236,0.06105 0.153593,0.11285 l 0.116472,0.04977 -0.062,0.140191 z m 0.700783,0.268368 -0.0066,-1.316555 0.176898,0.0499 -0.0087,1.036569 0.01,0.0028 0.576801,-0.876324 0.199324,0.05623 0.01867,1.0443 0.01,0.0028 0.549394,-0.884056 0.176898,0.0499 -0.715949,1.112734 -0.176898,-0.0499 -0.01469,-1.104139 -0.01,-0.0028 -0.608197,0.928431 z m 2.007568,0.482502 q -0.159382,-0.02028 -0.257801,-0.08672 -0.09808,-0.06899 -0.13786,-0.163957 -0.03978,-0.09497 -0.02617,-0.198565 0.01727,-0.131388 0.09834,-0.210996 0.08138,-0.08214 0.213327,-0.111602 0.13195,-0.02948 0.296477,-0.0086 l 0.349616,0.04445 q 0.0156,-0.118754 -0.01454,-0.207362 -0.02756,-0.08828 -0.09649,-0.140717 -0.0689,-0.05243 -0.179438,-0.06649 -0.133677,-0.01697 -0.240343,0.03881 -0.106333,0.05327 -0.146427,0.179195 l -0.190229,-0.02419 q 0.03338,-0.134482 0.12504,-0.215309 0.09457,-0.08303 0.218804,-0.113476 0.12457,-0.03297 0.253108,-0.01664 0.17738,0.02255 0.281843,0.102623 0.107037,0.0804 0.148296,0.20382 0.04159,0.120892 0.02161,0.272494 l -0.101418,0.77064 -0.164524,-0.02091 0.01169,-0.247705 -0.01026,-0.0013 q -0.03269,0.0498 -0.0779,0.09542 -0.04521,0.04563 -0.101613,0.077 -0.05383,0.03169 -0.123662,0.04593 -0.06726,0.01457 -0.149523,0.0041 z m 0.03861,-0.154364 q 0.08997,0.01144 0.168847,-0.01193 0.08178,-0.02556 0.144074,-0.08188 0.06487,-0.05598 0.107355,-0.140489 0.04282,-0.08704 0.05712,-0.195688 v 0 l -0.33676,-0.04281 q -0.138816,-0.01764 -0.227973,0.0044 -0.08659,0.02237 -0.132463,0.07307 -0.04297,0.04848 -0.05229,0.119231 -0.0093,0.07075 0.01712,0.128058 0.02899,0.05764 0.09186,0.09645 0.06542,0.03914 0.163104,0.05156 z m 0.909131,0.21265 0.03243,-1.263277 0.165842,0.0041 0.0066,0.247371 0.01035,2.57e-4 q 0.04375,-0.08811 0.110103,-0.147631 0.06894,-0.05945 0.163079,-0.09025 0.09414,-0.0308 0.210747,-0.0279 l -0.0048,0.185925 -0.04924,-0.0012 q -0.0881,-0.0022 -0.169024,0.01873 -0.07826,0.01843 -0.139235,0.07046 -0.0609,0.04946 -0.09947,0.137702 -0.03591,0.08576 -0.03924,0.215655 l -0.01679,0.654561 z m 1.44724,0.0031 q -0.180847,0.01451 -0.327109,-0.05554 -0.146475,-0.0726 -0.238802,-0.213446 -0.09254,-0.143388 -0.109213,-0.343991 -0.01666,-0.200602 0.0486,-0.354104 0.06785,-0.153706 0.203189,-0.246376 0.13534,-0.09266 0.31877,-0.107392 0.186016,-0.01494 0.324737,0.05829 0.138512,0.07068 0.219243,0.19712 0.08073,0.126444 0.09339,0.278799 0.0021,0.02538 0.0044,0.05332 0.0023,0.02793 0.0027,0.06369 l -1.072169,0.08608 -0.01266,-0.152358 0.899064,-0.07218 q -0.02316,-0.184744 -0.150649,-0.279314 -0.127493,-0.09457 -0.303173,-0.08047 -0.116259,0.0093 -0.212796,0.06821 -0.09653,0.05888 -0.150312,0.162886 -0.05399,0.101469 -0.04196,0.246211 l 0.0057,0.06856 q 0.01415,0.170134 0.08822,0.279214 0.07387,0.106543 0.179274,0.154319 0.107771,0.04503 0.218864,0.03611 0.144678,-0.0116 0.237366,-0.08552 0.09269,-0.0739 0.124315,-0.194027 l 0.17568,-0.01412 q -0.02149,0.116757 -0.08883,0.214186 -0.06733,0.09743 -0.176566,0.159883 -0.109453,0.05991 -0.259298,0.07194 z m 1.446091,-0.214608 q -0.179484,0.04 -0.333528,-0.01709 -0.154043,-0.0571 -0.261174,-0.187361 -0.107131,-0.130256 -0.148976,-0.311637 -0.04299,-0.18635 -4.01e-4,-0.347363 0.04455,-0.164063 0.164668,-0.27704 0.122075,-0.116028 0.311671,-0.158283 0.164315,-0.03662 0.301134,0.0034 0.136245,0.03756 0.226386,0.140252 l -0.167381,-0.725521 0.176955,-0.03944 0.401256,1.739264 -0.16179,0.03606 -0.07926,-0.251411 -0.01011,0.0023 q -0.01761,0.08491 -0.07097,0.164727 -0.05082,0.07925 -0.137712,0.140413 -0.08689,0.06116 -0.210762,0.08877 z m -0.0072,-0.157761 q 0.133981,-0.02987 0.223296,-0.115075 0.08931,-0.08522 0.124191,-0.21055 0.03487,-0.125332 4.82e-4,-0.274412 -0.03554,-0.154049 -0.118903,-0.250415 -0.08394,-0.09885 -0.19824,-0.133465 -0.114875,-0.0371 -0.248859,-0.0073 -0.131455,0.02929 -0.221341,0.11203 -0.08793,0.07968 -0.120281,0.204452 -0.03292,0.122284 0.002,0.273847 0.03497,0.151562 0.116377,0.25098 0.08141,0.09942 0.194331,0.139557 0.115448,0.03958 0.246903,0.01026 z m 1.576312,-0.305182 q -0.16953,0.06357 -0.329877,0.03644 -0.161271,-0.0295 -0.289939,-0.139423 -0.129591,-0.112292 -0.202584,-0.300342 -0.07299,-0.18805 -0.05393,-0.353357 0.02146,-0.166216 0.125123,-0.292337 0.103637,-0.126122 0.275586,-0.1906 0.174375,-0.06539 0.32838,-0.03315 0.15308,0.02987 0.266516,0.129117 0.113436,0.09926 0.168874,0.242086 0.0092,0.0238 0.0194,0.04999 0.01014,0.0262 0.0207,0.06042 l -1.005073,0.376877 -0.05544,-0.142823 0.842806,-0.316033 q -0.07471,-0.171045 -0.224003,-0.226869 -0.149286,-0.05582 -0.313974,0.006 -0.108986,0.04087 -0.184957,0.123893 -0.07597,0.08303 -0.09806,0.197655 -0.02301,0.112249 0.02966,0.247932 l 0.02495,0.06427 q 0.06191,0.159486 0.16403,0.243901 0.101202,0.08203 0.21598,0.09899 0.116277,0.01366 0.220418,-0.02538 0.135626,-0.05086 0.203632,-0.147255 0.06801,-0.0964 0.06426,-0.220428 l 0.164689,-0.06176 q 0.01251,0.118013 -0.02447,0.230047 -0.03697,0.11203 -0.12413,0.201977 -0.08808,0.08757 -0.228551,0.140237 z m 1.253986,-0.563957 q -0.132709,0.06944 -0.262322,0.07954 -0.127323,0.0089 -0.23875,-0.03959 -0.109137,-0.04968 -0.188496,-0.158247 l 0.167029,-0.0874 q 0.04784,0.05578 0.115968,0.08941 0.0692,0.03017 0.156115,0.02799 0.08569,-0.0044 0.179505,-0.05352 0.08695,-0.0455 0.128462,-0.09897 0.04151,-0.05347 0.04583,-0.110571 0.0043,-0.0571 -0.02371,-0.108819 -0.03898,-0.07196 -0.0963,-0.09104 -0.05625,-0.02252 -0.133564,-0.008 -0.07732,0.01448 -0.180874,0.04558 -0.07595,0.0224 -0.155558,0.0381 -0.08082,0.01342 -0.156298,0.0096 -0.07669,-0.0061 -0.140249,-0.04206 -0.06356,-0.03601 -0.103755,-0.110227 -0.05238,-0.0967 -0.04331,-0.193812 0.0079,-0.09936 0.07516,-0.186529 0.06838,-0.09062 0.189643,-0.154079 0.173896,-0.09099 0.333516,-0.06195 0.160691,0.02559 0.269139,0.182431 l -0.162451,0.08501 q -0.0591,-0.08742 -0.156975,-0.105467 -0.09788,-0.01806 -0.21228,0.04181 -0.109827,0.05747 -0.143734,0.135827 -0.03513,0.07611 0.0075,0.154816 0.02559,0.04723 0.07589,0.0642 0.0526,0.01575 0.12777,0.0082 0.07746,-0.0088 0.171871,-0.03509 0.113927,-0.03364 0.223721,-0.04779 0.110865,-0.01761 0.20568,0.01648 0.09589,0.03064 0.161665,0.152082 0.05589,0.09775 0.0459,0.204002 -0.0089,0.102802 -0.08066,0.198064 -0.07067,0.09182 -0.201088,0.160063 z m 0.685149,-0.428791 -0.698647,-1.060825 0.152321,-0.09691 0.698647,1.060825 z m -0.781654,-1.350961 q -0.04569,0.02905 -0.09947,0.01776 -0.05377,-0.01132 -0.08476,-0.05837 -0.0324,-0.04919 -0.02164,-0.09852 0.01293,-0.05071 0.06079,-0.08117 0.0457,-0.02905 0.09806,-0.01988 0.05236,0.0092 0.08617,0.06051 0.02957,0.04491 0.01806,0.09776 -0.0115,0.05285 -0.05721,0.08192 z m 2.058728,1.118989 q -0.133735,0.104864 -0.266583,0.153627 -0.130824,0.04718 -0.243343,0.03111 -0.108876,-0.01566 -0.178388,-0.101302 -0.03071,-0.03784 -0.05533,-0.09676 -0.02462,-0.05892 -0.02246,-0.142079 0.0021,-0.08316 0.05086,-0.186545 l 0.156325,-0.04435 q -0.06496,0.132408 -0.05332,0.208024 0.01163,0.07561 0.05851,0.13337 0.04203,0.05178 0.105164,0.0642 0.06475,0.01439 0.151429,-0.0177 0.0887,-0.0337 0.20015,-0.121089 0.111447,-0.08739 0.155272,-0.16412 0.04544,-0.07474 0.03784,-0.137223 -0.0039,-0.06207 -0.03953,-0.105893 -0.05496,-0.06772 -0.152109,-0.07302 -0.09715,-0.0053 -0.255588,0.105896 -0.130071,0.08895 -0.220822,0.140558 -0.09034,0.04803 -0.157576,0.07141 -0.06682,0.01979 -0.117027,0.02334 -0.05182,0.0015 -0.103228,-5.35e-4 l -0.0388,-0.0478 0.04539,-0.332178 0.124722,-0.02611 0.0041,0.270572 -0.04041,-0.04979 q 0.03684,4.47e-4 0.06842,-0.0015 0.02996,-0.0039 0.07249,-0.02098 0.04091,-0.01906 0.111812,-0.05834 0.07131,-0.04288 0.187197,-0.120709 0.143843,-0.09649 0.255609,-0.122208 0.113794,-0.02732 0.201996,0.0078 0.08861,0.03155 0.154889,0.113209 0.05335,0.06572 0.06332,0.171973 0.01,0.106248 -0.05052,0.231902 -0.05846,0.124064 -0.210437,0.243228 z m -0.602172,-0.733718 q -0.127657,0.100098 -0.253994,0.1242 -0.125928,0.02052 -0.237196,-0.02258 -0.111266,-0.04312 -0.188861,-0.138719 -0.07921,-0.09759 -0.09565,-0.211804 -0.01806,-0.11621 0.03189,-0.230338 0.05036,-0.117707 0.178018,-0.217808 0.127657,-0.100097 0.253585,-0.120621 0.126337,-0.0241 0.235581,0.02061 0.10965,0.04113 0.18886,0.138719 0.07759,0.0956 0.09565,0.211803 0.02009,0.114617 -0.03026,0.232327 -0.04995,0.114128 -0.177608,0.214225 z m -0.09699,-0.119495 q 0.1155,-0.09057 0.133871,-0.202745 0.0204,-0.11377 -0.06851,-0.223308 -0.09053,-0.111529 -0.2063,-0.115266 -0.115364,-0.0073 -0.230864,0.08325 -0.117528,0.09215 -0.137924,0.205923 -0.02,0.110188 0.07054,0.221721 0.08891,0.109538 0.204272,0.116854 0.117391,0.0057 0.234916,-0.08643 z m -0.183834,-0.553312 -0.156143,-0.08615 0.415392,-0.325716 0.07759,0.0956 z m 1.28518,0.365893 -0.931921,-0.870571 0.114289,-0.11819 0.170325,0.134509 0.0071,-0.0074 q -0.04188,-0.130508 -0.01196,-0.250195 0.02802,-0.12144 0.126246,-0.22301 0.103574,-0.107107 0.223576,-0.146147 0.120001,-0.03904 0.253047,8.89e-4 0.131164,0.03817 0.270202,0.168058 l 0.550514,0.514277 -0.125004,0.129269 -0.535479,-0.500227 q -0.154067,-0.143926 -0.291724,-0.149499 -0.135869,-0.0074 -0.251943,0.112616 -0.08036,0.0831 -0.103309,0.188196 -0.02295,0.105094 0.01846,0.217592 0.0432,0.110653 0.159689,0.219472 l 0.48287,0.451082 z"
           id="text5"
           style="font-size:0.858204px;line-height:1;font-family:'DM Sans';-inkscape-font-specification:'DM Sans, @opsz=40.0,wght=300';font-variation-settings:'opsz' 40, 'wght' 300;letter-spacing:0.0449792px;stroke:#070001;stroke-width:0.0364228"
           inkscape:label="subtitle"
           aria-label="softwaredesign" />
        <path
           id="path25"
           style="font-variation-settings:'opsz' 25, 'wght' 300;fill:none;stroke:#000000;stroke-width:0.239555;stroke-dasharray:none;stroke-opacity:1"
           inkscape:label="outerring"
           d="M 27.563717,18.732976 A 11.789496,11.587633 0 0 1 16.751284,25.701761 11.789496,11.587633 0 0 1 5.940234,18.736099" />
        <path
           id="path37"
           style="font-variation-settings:'opsz' 25, 'wght' 300;fill:none;stroke:#000000;stroke-width:0.239555;stroke-dasharray:none;stroke-opacity:1"
           inkscape:label="outerring"
           d="M 4.9634923,14.311124 A 11.789496,11.587633 0 0 1 4.9617885,14.114125 11.789496,11.587633 0 0 1 16.751284,2.5264919 11.789496,11.587633 0 0 1 28.540782,14.114125 v 0 a 11.789496,11.587633 0 0 1 -0.0017,0.196234" />
        <path
           id="circle25"
           style="font-variation-settings:'opsz' 25, 'wght' 300;display:inline;fill:none;stroke:#000000;stroke-width:0.239555;stroke-dasharray:none;stroke-opacity:1"
           inkscape:label="innerring"
           d="m 23.44963,18.741397 a 8.1873056,8.0471206 0 0 1 -6.698346,3.41985 8.1873056,8.0471206 0 0 1 -8.1873054,-8.047121 8.1873056,8.0471206 0 0 1 8.1873054,-8.0471202 8.1873056,8.0471206 0 0 1 8.187306,8.0471202 v 0 a 8.1873056,8.0471206 0 0 1 -0.0025,0.196877" />
        <path
           id="circle26"
           style="font-variation-settings:'opsz' 25, 'wght' 300;display:inline;fill:none;stroke:#000000;stroke-width:0.239555;stroke-linecap:round;stroke-dasharray:none;stroke-opacity:1"
           inkscape:label="middleringright"
           d="m 25.713078,18.731681 a 10.118543,9.9452909 0 0 1 -0.865885,1.348211" />
        <path
           id="path35"
           style="font-variation-settings:'opsz' 25, 'wght' 300;display:inline;fill:none;stroke:#000000;stroke-width:0.239555;stroke-linecap:round;stroke-dasharray:none;stroke-opacity:1"
           inkscape:label="middleringright"
           d="m 26.763746,12.677803 a 10.118543,9.9452909 0 0 1 0.10608,1.436323 v 0 a 10.118543,9.9452909 0 0 1 -0.002,0.196073" />
        <path
           id="path27"
           style="font-variation-settings:'opsz' 25, 'wght' 300;display:inline;fill:none;stroke:#000000;stroke-width:0.239555;stroke-linecap:round;stroke-dasharray:none;stroke-opacity:1"
           inkscape:label="middleringleft"
           d="m 6.6347172,14.310663 a 10.118543,9.9452909 0 0 1 -0.00198,-0.196537 10.118543,9.9452909 0 0 1 0.1059806,-1.435651" />
        <path
           id="path34"
           style="font-variation-settings:'opsz' 25, 'wght' 300;display:inline;fill:none;stroke:#000000;stroke-width:0.239555;stroke-linecap:round;stroke-dasharray:none;stroke-opacity:1"
           inkscape:label="middleringleft"
           d="M 8.6553751,20.079892 A 10.118543,9.9452909 0 0 1 7.790782,18.734103" />
        <path
           id="path33"
           style="font-variation-settings:'opsz' 25, 'wght' 300;fill:none;stroke:#000000;stroke-width:0.23773;stroke-linecap:round;stroke-linejoin:round"
           inkscape:label="banner"
           d="m 24.998056,14.31078 h 7.161562 l -1.060364,2.210815 1.060364,2.210814 -8.597831,1e-6 m 1.374352,-4.421407 a 8.1873056,8.0471206 0 0 1 -1.486509,4.430394" />
        <text
           xml:space="preserve"
           style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:2.83213px;line-height:1em;font-family:'DM Sans';-inkscape-font-specification:'DM Sans, @opsz=25.2,wght=300';font-variant-ligatures:normal;font-variant-caps:normal;font-variant-numeric:normal;font-variant-east-asian:normal;font-variation-settings:'opsz' 25, 'wght' 300;text-align:center;letter-spacing:0.134687px;text-anchor:middle;fill:#000000;fill-opacity:1;stroke:#000000;stroke-width:0.239554;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1"
           x="5.5788321"
           y="17.656126"
           id="text9"
           transform="scale(1.0086726,0.99140194)"><tspan
             sodipodi:role="line"
             id="tspan9"
             style="fill:#000000;fill-opacity:1;stroke-width:0.239555"
             x="5.6461754"
             y="17.656126">20</tspan></text>
        <text
           xml:space="preserve"
           style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:2.83213px;line-height:1em;font-family:'DM Sans';-inkscape-font-specification:'DM Sans, @opsz=25.2,wght=300';font-variant-ligatures:normal;font-variant-caps:normal;font-variant-numeric:normal;font-variant-east-asian:normal;font-variation-settings:'opsz' 25, 'wght' 300;text-align:center;letter-spacing:0.134687px;text-anchor:middle;fill:#000000;fill-opacity:1;stroke:#000000;stroke-width:0.239554;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1"
           x="27.510328"
           y="17.67765"
           id="text10"
           transform="scale(1.0086726,0.99140194)"><tspan
             sodipodi:role="line"
             id="tspan10"
             style="fill:#000000;fill-opacity:1;stroke-width:0.239555"
             x="27.577671"
             y="17.67765">24</tspan></text>
        <path
           style="font-variation-settings:'opsz' 25, 'wght' 300;fill:none;stroke:#000000;stroke-width:0.0799999;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1"
           id="rect10"
           width="2.6316426"
           height="1.3955824"
           x="4.9982886"
           y="5.3847823"
           ry="0.11083237"
           rx="0"
           inkscape:path-effect="#path-effect13"
           sodipodi:type="rect"
           d="m 5.1867203,5.4382269 2.2581814,-0.00241 c 0.057639,-6.14e-5 0.1067397,0.044614 0.1101024,0.1004476 l 0.068099,1.1307275 c 0.00377,0.062657 -0.042705,0.1133679 -0.1042264,0.1133679 H 5.1088997 c -0.061281,0 -0.1074144,-0.050606 -0.1034646,-0.1131329 L 5.0767227,5.5387115 C 5.0802432,5.48298 5.1292922,5.4382881 5.1867203,5.4382269 Z"
           transform="matrix(4.1664714,0,0,4.3179672,-9.4773118,-13.019709)" />
        <path
           id="rect11"
           style="font-variation-settings:'opsz' 25, 'wght' 300;fill:#8a8a8a;fill-opacity:1;stroke:#000000;stroke-width:0.151778;stroke-linecap:round;stroke-dasharray:none"
           d="m 12.155368,10.911649 h 9.316195 l 0.292279,4.829294 h -9.899668 z"
           sodipodi:nodetypes="ccccc" />
        <rect
           style="font-variation-settings:'opsz' 25, 'wght' 300;fill:none;stroke:#000000;stroke-width:0.26486;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1"
           id="rect12"
           width="13.393209"
           height="0.93939871"
           x="10.133641"
           y="16.697479"
           ry="0.46969935" />
        <rect
           style="font-variation-settings:'opsz' 25, 'wght' 300;fill:none;stroke:#000000;stroke-width:0.212077;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1"
           id="rect13"
           width="3.5517092"
           height="0.29071295"
           x="15.054392"
           y="17.023335"
           ry="0.14535648" />
      </g>
    </g>
  </g>
  <script
     id="JessyInk"
     ns1:version="1.5.5">// Copyright 2008, 2009 Hannes Hochreiner
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.

// Set onload event handler.
window.onload = jessyInkInit;

// Creating a namespace dictionary. The standard Inkscape namespaces are taken from inkex.py.
var NSS = new Object();
NSS['sodipodi']='http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd';
NSS['cc']='http://web.resource.org/cc/';
NSS['svg']='http://www.w3.org/2000/svg';
NSS['dc']='http://purl.org/dc/elements/1.1/';
NSS['rdf']='http://www.w3.org/1999/02/22-rdf-syntax-ns#';
NSS['inkscape']='http://www.inkscape.org/namespaces/inkscape';
NSS['xlink']='http://www.w3.org/1999/xlink';
NSS['xml']='http://www.w3.org/XML/1998/namespace';
NSS['jessyink']='https://launchpad.net/jessyink';

// Keycodes.
var LEFT_KEY = 37; // cursor left keycode
var UP_KEY = 38; // cursor up keycode
var RIGHT_KEY = 39; // cursor right keycode
var DOWN_KEY = 40; // cursor down keycode
var PAGE_UP_KEY = 33; // page up keycode
var PAGE_DOWN_KEY = 34; // page down keycode
var HOME_KEY = 36; // home keycode
var END_KEY = 35; // end keycode
var ENTER_KEY = 13; // next slide
var SPACE_KEY = 32;
var ESCAPE_KEY = 27;

// Presentation modes.
var SLIDE_MODE = 1;
var INDEX_MODE = 2;
var DRAWING_MODE = 3;

// Mouse handler actions.
var MOUSE_UP = 1;
var MOUSE_DOWN = 2;
var MOUSE_MOVE = 3;
var MOUSE_WHEEL = 4;

// Parameters.
var ROOT_NODE = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;svg&quot;)[0];
var HEIGHT = 0;
var WIDTH = 0;
var INDEX_COLUMNS_DEFAULT = 4;
var INDEX_COLUMNS = INDEX_COLUMNS_DEFAULT;
var INDEX_OFFSET = 0;
var STATE_START = -1;
var STATE_END = -2;
var BACKGROUND_COLOR = null;
var slides = new Array();

// Initialisation.
var currentMode = SLIDE_MODE;
var masterSlide = null;
var activeSlide = 0;
var activeEffect = 0;
var timeStep = 30; // 40 ms equal 25 frames per second.
var lastFrameTime = null;
var processingEffect = false;
var transCounter = 0;
var effectArray = 0;
var defaultTransitionInDict = new Object();
defaultTransitionInDict[&quot;name&quot;] = &quot;appear&quot;;
var defaultTransitionOutDict = new Object();
defaultTransitionOutDict[&quot;name&quot;] = &quot;appear&quot;;
var jessyInkInitialised = false;

// Initialise char and key code dictionaries.
var charCodeDictionary = getDefaultCharCodeDictionary();
var keyCodeDictionary = getDefaultKeyCodeDictionary();

// Initialise mouse handler dictionary.
var mouseHandlerDictionary = getDefaultMouseHandlerDictionary();

var progress_bar_visible = false;
var timer_elapsed = 0;
var timer_start = timer_elapsed;
var timer_duration = 15; // 15 minutes

var history_counter = 0;
var history_original_elements = new Array();
var history_presentation_elements = new Array();

var mouse_original_path = null;
var mouse_presentation_path = null;
var mouse_last_x = -1;
var mouse_last_y = -1;
var mouse_min_dist_sqr = 3 * 3;
var path_colour = &quot;red&quot;;
var path_width_default = 3;
var path_width = path_width_default;
var path_paint_width = path_width;

var number_of_added_slides = 0;

/** Initialisation function.
 *  The whole presentation is set-up in this function.
 */
function jessyInkInit()
{
    // Make sure we only execute this code once. Double execution can occur if the onload event handler is set
    // in the main svg tag as well (as was recommended in earlier versions). Executing this function twice does
    // not lead to any problems, but it takes more time.
    if (jessyInkInitialised)
        return;

    // Making the presentation scalable.
    var VIEWBOX = ROOT_NODE.getAttribute(&quot;viewBox&quot;);

    if (VIEWBOX)
    {
        WIDTH = ROOT_NODE.viewBox.animVal.width;
        HEIGHT = ROOT_NODE.viewBox.animVal.height;
    }
    else
    {
        HEIGHT = parseFloat(ROOT_NODE.getAttribute(&quot;height&quot;));
        WIDTH = parseFloat(ROOT_NODE.getAttribute(&quot;width&quot;));
        ROOT_NODE.setAttribute(&quot;viewBox&quot;, &quot;0 0 &quot; + WIDTH + &quot; &quot; + HEIGHT);
    }

    ROOT_NODE.setAttribute(&quot;width&quot;, &quot;100%&quot;);
    ROOT_NODE.setAttribute(&quot;height&quot;, &quot;100%&quot;);

    // Setting the background color.
    var namedViews = document.getElementsByTagNameNS(NSS[&quot;sodipodi&quot;], &quot;namedview&quot;);

    for (var counter = 0; counter &lt; namedViews.length; counter++)
    {
        if (namedViews[counter].hasAttribute(&quot;id&quot;) &amp;&amp; namedViews[counter].hasAttribute(&quot;pagecolor&quot;))
        {
            if (namedViews[counter].getAttribute(&quot;id&quot;) == &quot;base&quot;)
            {
                BACKGROUND_COLOR = namedViews[counter].getAttribute(&quot;pagecolor&quot;);
                var newAttribute = &quot;background-color:&quot; + BACKGROUND_COLOR + &quot;;&quot;;

                if (ROOT_NODE.hasAttribute(&quot;style&quot;))
                    newAttribute += ROOT_NODE.getAttribute(&quot;style&quot;);

                ROOT_NODE.setAttribute(&quot;style&quot;, newAttribute);
            }
        }
    }

    // Defining clip-path.
    var defsNodes = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;defs&quot;);

    if (defsNodes.length &gt; 0)
    {
        var existingClipPath = document.getElementById(&quot;jessyInkSlideClipPath&quot;);

        if (!existingClipPath)
        {
            var rectNode = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);
            var clipPath = document.createElementNS(NSS[&quot;svg&quot;], &quot;clipPath&quot;);

            rectNode.setAttribute(&quot;x&quot;, 0);
            rectNode.setAttribute(&quot;y&quot;, 0);
            rectNode.setAttribute(&quot;width&quot;, WIDTH);
            rectNode.setAttribute(&quot;height&quot;, HEIGHT);

            clipPath.setAttribute(&quot;id&quot;, &quot;jessyInkSlideClipPath&quot;);
            clipPath.setAttribute(&quot;clipPathUnits&quot;, &quot;userSpaceOnUse&quot;);

            clipPath.appendChild(rectNode);
            defsNodes[0].appendChild(clipPath);
        }
    }

    // Making a list of the slide and finding the master slide.
    var nodes = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;g&quot;);
    var tempSlides = new Array();
    var existingJessyInkPresentationLayer = null;

    for (var counter = 0; counter &lt; nodes.length; counter++)
    {
        if (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;) &amp;&amp; (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;) == &quot;layer&quot;))
        {
            if (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;) &amp;&amp; nodes[counter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;masterSlide&quot;) == &quot;masterSlide&quot;)
                masterSlide = nodes[counter];
            else if (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;) &amp;&amp; nodes[counter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;presentationLayer&quot;) == &quot;presentationLayer&quot;)
                existingJessyInkPresentationLayer = nodes[counter];
            else
                tempSlides.push(nodes[counter].getAttribute(&quot;id&quot;));
        }
        else if (nodes[counter].getAttributeNS(NSS['jessyink'], 'element'))
        {
            handleElement(nodes[counter]);
        }
    }

    // Hide master slide set default transitions.
    if (masterSlide)
    {
        masterSlide.style.display = &quot;none&quot;;

        if (masterSlide.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;))
            defaultTransitionInDict = propStrToDict(masterSlide.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;));

        if (masterSlide.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;))
            defaultTransitionOutDict = propStrToDict(masterSlide.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;));
    }

    if (existingJessyInkPresentationLayer != null)
    {
        existingJessyInkPresentationLayer.parentNode.removeChild(existingJessyInkPresentationLayer);
    }

    // Set start slide.
    var hashObj = new LocationHash(window.location.hash);

    activeSlide = hashObj.slideNumber;
    activeEffect = hashObj.effectNumber;

    if (activeSlide &lt; 0)
        activeSlide = 0;
    else if (activeSlide &gt;= tempSlides.length)
        activeSlide = tempSlides.length - 1;

    var originalNode = document.getElementById(tempSlides[counter]);

    var JessyInkPresentationLayer = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
    JessyInkPresentationLayer.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
    JessyInkPresentationLayer.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, &quot;JessyInk Presentation Layer&quot;);
    JessyInkPresentationLayer.setAttributeNS(NSS[&quot;jessyink&quot;], &quot;presentationLayer&quot;, &quot;presentationLayer&quot;);
    JessyInkPresentationLayer.setAttribute(&quot;id&quot;, &quot;jessyink_presentation_layer&quot;);
    JessyInkPresentationLayer.style.display = &quot;inherit&quot;;
    ROOT_NODE.appendChild(JessyInkPresentationLayer);

    // Gathering all the information about the transitions and effects of the slides, set the background
    // from the master slide and substitute the auto-texts.
    for (var counter = 0; counter &lt; tempSlides.length; counter++)
    {
        var originalNode = document.getElementById(tempSlides[counter]);
        originalNode.style.display = &quot;none&quot;;
        var node = suffixNodeIds(originalNode.cloneNode(true), &quot;_&quot; + counter);
        JessyInkPresentationLayer.appendChild(node);
        slides[counter] = new Object();
        slides[counter][&quot;original_element&quot;] = originalNode;
        slides[counter][&quot;element&quot;] = node;

        // Set build in transition.
        slides[counter][&quot;transitionIn&quot;] = new Object();

        var dict;

        if (node.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;))
            dict = propStrToDict(node.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;));
        else
            dict = defaultTransitionInDict;

        slides[counter][&quot;transitionIn&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
        slides[counter][&quot;transitionIn&quot;][&quot;options&quot;] = new Object();

        for (key in dict)
            if (key != &quot;name&quot;)
                slides[counter][&quot;transitionIn&quot;][&quot;options&quot;][key] = dict[key];

        // Set build out transition.
        slides[counter][&quot;transitionOut&quot;] = new Object();

        if (node.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;))
            dict = propStrToDict(node.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;));
        else
            dict = defaultTransitionOutDict;

        slides[counter][&quot;transitionOut&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
        slides[counter][&quot;transitionOut&quot;][&quot;options&quot;] = new Object();

        for (key in dict)
            if (key != &quot;name&quot;)
                slides[counter][&quot;transitionOut&quot;][&quot;options&quot;][key] = dict[key];

        // Copy master slide content.
        if (masterSlide)
        {
            var clonedNode = suffixNodeIds(masterSlide.cloneNode(true), &quot;_&quot; + counter);
            clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;);
            clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;);
            clonedNode.style.display = &quot;inherit&quot;;

            node.insertBefore(clonedNode, node.firstChild);
        }

        // Setting clip path.
        node.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);

        // Substitute auto texts.
        substituteAutoTexts(node, node.getAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;), counter + 1, tempSlides.length);

        node.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;);
        node.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;);

        // Set effects.
        var tempEffects = new Array();
        var groups = new Object();

        for (var IOCounter = 0; IOCounter &lt;= 1; IOCounter++)
        {
            var propName = &quot;&quot;;
            var dir = 0;

            if (IOCounter == 0)
            {
                propName = &quot;effectIn&quot;;
                dir = 1;
            }
            else if (IOCounter == 1)
            {
                propName = &quot;effectOut&quot;;
                dir = -1;
            }

            var effects = getElementsByPropertyNS(node, NSS[&quot;jessyink&quot;], propName);

            for (var effectCounter = 0; effectCounter &lt; effects.length; effectCounter++)
            {
                var element = document.getElementById(effects[effectCounter]);
                var dict = propStrToDict(element.getAttributeNS(NSS[&quot;jessyink&quot;], propName));

                // Put every element that has an effect associated with it, into its own group.
                // Unless of course, we already put it into its own group.
                if (!(groups[element.id]))
                {
                    var newGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

                    element.parentNode.insertBefore(newGroup, element);
                    newGroup.appendChild(element.parentNode.removeChild(element));
                    groups[element.id] = newGroup;
                }

                var effectDict = new Object();

                effectDict[&quot;effect&quot;] = dict[&quot;name&quot;];
                effectDict[&quot;dir&quot;] = dir;
                effectDict[&quot;element&quot;] = groups[element.id];

                for (var option in dict)
                {
                    if ((option != &quot;name&quot;) &amp;&amp; (option != &quot;order&quot;))
                    {
                        if (!effectDict[&quot;options&quot;])
                            effectDict[&quot;options&quot;] = new Object();

                        effectDict[&quot;options&quot;][option] = dict[option];
                    }
                }

                if (!tempEffects[dict[&quot;order&quot;]])
                    tempEffects[dict[&quot;order&quot;]] = new Array();

                tempEffects[dict[&quot;order&quot;]][tempEffects[dict[&quot;order&quot;]].length] = effectDict;
            }
        }

        // Make invisible, but keep in rendering tree to ensure that bounding box can be calculated.
        node.setAttribute(&quot;opacity&quot;,0);
        node.style.display = &quot;inherit&quot;;

        // Create a transform group.
        var transformGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

        // Add content to transform group.
        while (node.firstChild)
            transformGroup.appendChild(node.firstChild);

        // Transfer the transform attribute from the node to the transform group.
        if (node.getAttribute(&quot;transform&quot;))
        {
            transformGroup.setAttribute(&quot;transform&quot;, node.getAttribute(&quot;transform&quot;));
            node.removeAttribute(&quot;transform&quot;);
        }

        // Create a view group.
        var viewGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

        viewGroup.appendChild(transformGroup);
        slides[counter][&quot;viewGroup&quot;] = node.appendChild(viewGroup);

        // Insert background.
        if (BACKGROUND_COLOR != null)
        {
            var rectNode = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);

            rectNode.setAttribute(&quot;x&quot;, 0);
            rectNode.setAttribute(&quot;y&quot;, 0);
            rectNode.setAttribute(&quot;width&quot;, WIDTH);
            rectNode.setAttribute(&quot;height&quot;, HEIGHT);
            rectNode.setAttribute(&quot;id&quot;, &quot;jessyInkBackground&quot; + counter);
            rectNode.setAttribute(&quot;fill&quot;, BACKGROUND_COLOR);

            slides[counter][&quot;viewGroup&quot;].insertBefore(rectNode, slides[counter][&quot;viewGroup&quot;].firstChild);
        }

        // Set views.
        var tempViews = new Array();
        var views = getElementsByPropertyNS(node, NSS[&quot;jessyink&quot;], &quot;view&quot;);
        var matrixOld = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);

        // Set initial view even if there are no other views.
        slides[counter][&quot;viewGroup&quot;].setAttribute(&quot;transform&quot;, matrixOld.toAttribute());
        slides[counter].initialView = matrixOld.toAttribute();

        for (var viewCounter = 0; viewCounter &lt; views.length; viewCounter++)
        {
            var element = document.getElementById(views[viewCounter]);
            var dict = propStrToDict(element.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;view&quot;));

            if (dict[&quot;order&quot;] == 0)
            {
                matrixOld = pointMatrixToTransformation(rectToMatrix(element)).mult((new matrixSVG()).fromSVGMatrix(slides[counter].viewGroup.getScreenCTM()).inv().mult((new matrixSVG()).fromSVGMatrix(element.parentNode.getScreenCTM())).inv());
                slides[counter].initialView = matrixOld.toAttribute();
            }
            else
            {
                var effectDict = new Object();

                effectDict[&quot;effect&quot;] = dict[&quot;name&quot;];
                effectDict[&quot;dir&quot;] = 1;
                effectDict[&quot;element&quot;] = slides[counter][&quot;viewGroup&quot;];
                effectDict[&quot;order&quot;] = dict[&quot;order&quot;];

                for (var option in dict)
                {
                    if ((option != &quot;name&quot;) &amp;&amp; (option != &quot;order&quot;))
                    {
                        if (!effectDict[&quot;options&quot;])
                            effectDict[&quot;options&quot;] = new Object();

                        effectDict[&quot;options&quot;][option] = dict[option];
                    }
                }

                effectDict[&quot;options&quot;][&quot;matrixNew&quot;] = pointMatrixToTransformation(rectToMatrix(element)).mult((new matrixSVG()).fromSVGMatrix(slides[counter].viewGroup.getScreenCTM()).inv().mult((new matrixSVG()).fromSVGMatrix(element.parentNode.getScreenCTM())).inv());

                tempViews[dict[&quot;order&quot;]] = effectDict;
            }

            // Remove element.
            element.parentNode.removeChild(element);
        }

        // Consolidate view array and append it to the effect array.
        if (tempViews.length &gt; 0)
        {
            for (var viewCounter = 0; viewCounter &lt; tempViews.length; viewCounter++)
            {
                if (tempViews[viewCounter])
                {
                    tempViews[viewCounter][&quot;options&quot;][&quot;matrixOld&quot;] = matrixOld;
                    matrixOld = tempViews[viewCounter][&quot;options&quot;][&quot;matrixNew&quot;];

                    if (!tempEffects[tempViews[viewCounter][&quot;order&quot;]])
                        tempEffects[tempViews[viewCounter][&quot;order&quot;]] = new Array();

                    tempEffects[tempViews[viewCounter][&quot;order&quot;]][tempEffects[tempViews[viewCounter][&quot;order&quot;]].length] = tempViews[viewCounter];
                }
            }
        }

        // Set consolidated effect array.
        if (tempEffects.length &gt; 0)
        {
            slides[counter][&quot;effects&quot;] = new Array();

            for (var effectCounter = 0; effectCounter &lt; tempEffects.length; effectCounter++)
            {
                if (tempEffects[effectCounter])
                    slides[counter][&quot;effects&quot;][slides[counter][&quot;effects&quot;].length] = tempEffects[effectCounter];
            }
        }

        node.setAttribute(&quot;onmouseover&quot;, &quot;if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != &quot; + counter + &quot;)) { indexSetActiveSlide(&quot; + counter + &quot;); };&quot;);

        // Set visibility for initial state.
        if (counter == activeSlide)
        {
            node.style.display = &quot;inherit&quot;;
            node.setAttribute(&quot;opacity&quot;,1);
        }
        else
        {
            node.style.display = &quot;none&quot;;
            node.setAttribute(&quot;opacity&quot;,0);
        }
    }

    // Set key handler.
    var jessyInkObjects = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;g&quot;);

    for (var counter = 0; counter &lt; jessyInkObjects.length; counter++)
    {
        var elem = jessyInkObjects[counter];

        if (elem.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;customKeyBindings&quot;))
        {
            if (elem.getCustomKeyBindings != undefined)
                keyCodeDictionary = elem.getCustomKeyBindings();

            if (elem.getCustomCharBindings != undefined)
                charCodeDictionary = elem.getCustomCharBindings();
        }
    }

    // Set mouse handler.
    var jessyInkMouseHandler = document.getElementsByTagNameNS(NSS[&quot;jessyink&quot;], &quot;mousehandler&quot;);

    for (var counter = 0; counter &lt; jessyInkMouseHandler.length; counter++)
    {
        var elem = jessyInkMouseHandler[counter];

        if (elem.getMouseHandler != undefined)
        {
            var tempDict = elem.getMouseHandler();

            for (mode in tempDict)
            {
                if (!mouseHandlerDictionary[mode])
                    mouseHandlerDictionary[mode] = new Object();

                for (handler in tempDict[mode])
                    mouseHandlerDictionary[mode][handler] = tempDict[mode][handler];
            }
        }
    }

    // Check effect number.
    if ((activeEffect &lt; 0) || (!slides[activeSlide].effects))
    {
        activeEffect = 0;
    }
    else if (activeEffect &gt; slides[activeSlide].effects.length)
    {
        activeEffect = slides[activeSlide].effects.length;
    }

    createProgressBar(JessyInkPresentationLayer);
    hideProgressBar();
    setProgressBarValue(activeSlide);
    setTimeIndicatorValue(0);
    setInterval(&quot;updateTimer()&quot;, 1000);
    setSlideToState(activeSlide, activeEffect);
    jessyInkInitialised = true;
}

/** Function to substitute the auto-texts.
 *
 *  @param node the node
 *  @param slideName name of the slide the node is on
 *  @param slideNumber number of the slide the node is on
 *  @param numberOfSlides number of slides in the presentation
 */
function substituteAutoTexts(node, slideName, slideNumber, numberOfSlides)
{
    var texts = node.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;tspan&quot;);

    for (var textCounter = 0; textCounter &lt; texts.length; textCounter++)
    {
        if (texts[textCounter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;autoText&quot;) == &quot;slideNumber&quot;)
            texts[textCounter].firstChild.nodeValue = slideNumber;
        else if (texts[textCounter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;autoText&quot;) == &quot;numberOfSlides&quot;)
            texts[textCounter].firstChild.nodeValue = numberOfSlides;
        else if (texts[textCounter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;autoText&quot;) == &quot;slideTitle&quot;)
            texts[textCounter].firstChild.nodeValue = slideName;
    }
}

/** Convenience function to get an element depending on whether it has a property with a particular name.
 *    This function emulates some dearly missed XPath functionality.
 *
 *  @param node the node
 *  @param namespace namespace of the attribute
 *  @param name attribute name
 */
function getElementsByPropertyNS(node, namespace, name)
{
    var elems = new Array();

    if (node.getAttributeNS(namespace, name))
        elems.push(node.getAttribute(&quot;id&quot;));

    for (var counter = 0; counter &lt; node.childNodes.length; counter++)
    {
        if (node.childNodes[counter].nodeType == 1)
            elems = elems.concat(getElementsByPropertyNS(node.childNodes[counter], namespace, name));
    }

    return elems;
}

/** Function to dispatch the next effect, if there is none left, change the slide.
 *
 *  @param dir direction of the change (1 = forwards, -1 = backwards)
 */
function dispatchEffects(dir)
{
    if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (((dir == 1) &amp;&amp; (activeEffect &lt; slides[activeSlide][&quot;effects&quot;].length)) || ((dir == -1) &amp;&amp; (activeEffect &gt; 0))))
    {
        processingEffect = true;

        if (dir == 1)
        {
            effectArray = slides[activeSlide][&quot;effects&quot;][activeEffect];
            activeEffect += dir;
        }
        else if (dir == -1)
        {
            activeEffect += dir;
            effectArray = slides[activeSlide][&quot;effects&quot;][activeEffect];
        }

        transCounter = 0;
        startTime = (new Date()).getTime();
        lastFrameTime = null;
        effect(dir);
    }
    else if (((dir == 1) &amp;&amp; (activeSlide &lt; (slides.length - 1))) || (((dir == -1) &amp;&amp; (activeSlide &gt; 0))))
    {
        changeSlide(dir);
    }
}

/** Function to skip effects and directly either put the slide into start or end state or change slides.
 *
 *  @param dir direction of the change (1 = forwards, -1 = backwards)
 */
function skipEffects(dir)
{
    if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (((dir == 1) &amp;&amp; (activeEffect &lt; slides[activeSlide][&quot;effects&quot;].length)) || ((dir == -1) &amp;&amp; (activeEffect &gt; 0))))
    {
        processingEffect = true;

        if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (dir == 1))
            activeEffect = slides[activeSlide][&quot;effects&quot;].length;
        else
            activeEffect = 0;

        if (dir == 1)
            setSlideToState(activeSlide, STATE_END);
        else
            setSlideToState(activeSlide, STATE_START);

        processingEffect = false;
    }
    else if (((dir == 1) &amp;&amp; (activeSlide &lt; (slides.length - 1))) || (((dir == -1) &amp;&amp; (activeSlide &gt; 0))))
    {
        changeSlide(dir);
    }
}

/** Function to change between slides.
 *
 *  @param dir direction (1 = forwards, -1 = backwards)
 */
function changeSlide(dir)
{
    processingEffect = true;
    effectArray = new Array();

    effectArray[0] = new Object();
    if (dir == 1)
    {
        effectArray[0][&quot;effect&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;name&quot;];
        effectArray[0][&quot;options&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;options&quot;];
        effectArray[0][&quot;dir&quot;] = -1;
    }
    else if (dir == -1)
    {
        effectArray[0][&quot;effect&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;name&quot;];
        effectArray[0][&quot;options&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;options&quot;];
        effectArray[0][&quot;dir&quot;] = 1;
    }
    effectArray[0][&quot;element&quot;] = slides[activeSlide][&quot;element&quot;];

    activeSlide += dir;
    setProgressBarValue(activeSlide);

    effectArray[1] = new Object();

    if (dir == 1)
    {
        effectArray[1][&quot;effect&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;name&quot;];
        effectArray[1][&quot;options&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;options&quot;];
        effectArray[1][&quot;dir&quot;] = 1;
    }
    else if (dir == -1)
    {
        effectArray[1][&quot;effect&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;name&quot;];
        effectArray[1][&quot;options&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;options&quot;];
        effectArray[1][&quot;dir&quot;] = -1;
    }

    effectArray[1][&quot;element&quot;] = slides[activeSlide][&quot;element&quot;];

    if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (dir == -1))
        activeEffect = slides[activeSlide][&quot;effects&quot;].length;
    else
        activeEffect = 0;

    if (dir == -1)
        setSlideToState(activeSlide, STATE_END);
    else
        setSlideToState(activeSlide, STATE_START);

    transCounter = 0;
    startTime = (new Date()).getTime();
    lastFrameTime = null;
    effect(dir);
}

/** Function to toggle between index and slide mode.
*/
function toggleSlideIndex()
{
    var suspendHandle = ROOT_NODE.suspendRedraw(500);

    if (currentMode == SLIDE_MODE)
    {
        hideProgressBar();
        INDEX_OFFSET = -1;
        indexSetPageSlide(activeSlide);
        currentMode = INDEX_MODE;
    }
    else if (currentMode == INDEX_MODE)
    {
        for (var counter = 0; counter &lt; slides.length; counter++)
        {
            slides[counter][&quot;element&quot;].setAttribute(&quot;transform&quot;,&quot;scale(1)&quot;);

            if (counter == activeSlide)
            {
                slides[counter][&quot;element&quot;].style.display = &quot;inherit&quot;;
                slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,1);
                activeEffect = 0;
            }
            else
            {
                slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0);
                slides[counter][&quot;element&quot;].style.display = &quot;none&quot;;
            }
        }
        currentMode = SLIDE_MODE;
        setSlideToState(activeSlide, STATE_START);
        setProgressBarValue(activeSlide);

        if (progress_bar_visible)
        {
            showProgressBar();
        }
    }

    ROOT_NODE.unsuspendRedraw(suspendHandle);
    ROOT_NODE.forceRedraw();
}

/** Function to run an effect.
 *
 *  @param dir direction in which to play the effect (1 = forwards, -1 = backwards)
 */
function effect(dir)
{
    var done = true;

    var suspendHandle = ROOT_NODE.suspendRedraw(200);

    for (var counter = 0; counter &lt; effectArray.length; counter++)
    {
        if (effectArray[counter][&quot;effect&quot;] == &quot;fade&quot;)
            done &amp;= fade(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
        else if (effectArray[counter][&quot;effect&quot;] == &quot;appear&quot;)
            done &amp;= appear(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
        else if (effectArray[counter][&quot;effect&quot;] == &quot;pop&quot;)
            done &amp;= pop(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
        else if (effectArray[counter][&quot;effect&quot;] == &quot;view&quot;)
            done &amp;= view(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
    }

    ROOT_NODE.unsuspendRedraw(suspendHandle);
    ROOT_NODE.forceRedraw();

    if (!done)
    {
        var currentTime = (new Date()).getTime();
        var timeDiff = 1;

        transCounter = currentTime - startTime;

        if (lastFrameTime != null)
        {
            timeDiff = timeStep - (currentTime - lastFrameTime);

            if (timeDiff &lt;= 0)
                timeDiff = 1;
        }

        lastFrameTime = currentTime;

        window.setTimeout(&quot;effect(&quot; + dir + &quot;)&quot;, timeDiff);
    }
    else
    {
        window.location.hash = (activeSlide + 1) + '_' + activeEffect;
        processingEffect = false;
    }
}

/** Function to display the index sheet.
 *
 *  @param offsetNumber offset number
 */
function displayIndex(offsetNumber)
{
    var offsetX = 0;
    var offsetY = 0;

    if (offsetNumber &lt; 0)
        offsetNumber = 0;
    else if (offsetNumber &gt;= slides.length)
        offsetNumber = slides.length - 1;

    for (var counter = 0; counter &lt; slides.length; counter++)
    {
        if ((counter &lt; offsetNumber) || (counter &gt; offsetNumber + INDEX_COLUMNS * INDEX_COLUMNS - 1))
        {
            slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0);
            slides[counter][&quot;element&quot;].style.display = &quot;none&quot;;
        }
        else
        {
            offsetX = ((counter - offsetNumber) % INDEX_COLUMNS) * WIDTH;
            offsetY = Math.floor((counter - offsetNumber) / INDEX_COLUMNS) * HEIGHT;

            slides[counter][&quot;element&quot;].setAttribute(&quot;transform&quot;,&quot;scale(&quot;+1/INDEX_COLUMNS+&quot;) translate(&quot;+offsetX+&quot;,&quot;+offsetY+&quot;)&quot;);
            slides[counter][&quot;element&quot;].style.display = &quot;inherit&quot;;
            slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0.5);
        }

        setSlideToState(counter, STATE_END);
    }

    //do we need to save the current offset?
    if (INDEX_OFFSET != offsetNumber)
        INDEX_OFFSET = offsetNumber;
}

/** Function to set the active slide in the slide view.
 *
 *  @param nbr index of the active slide
 */
function slideSetActiveSlide(nbr)
{
    if (nbr &gt;= slides.length)
        nbr = slides.length - 1;
    else if (nbr &lt; 0)
        nbr = 0;

    slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0);
    slides[activeSlide][&quot;element&quot;].style.display = &quot;none&quot;;

    activeSlide = parseInt(nbr);

    setSlideToState(activeSlide, STATE_START);
    slides[activeSlide][&quot;element&quot;].style.display = &quot;inherit&quot;;
    slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,1);

    activeEffect = 0;
    setProgressBarValue(nbr);
}

/** Function to set the active slide in the index view.
 *
 *  @param nbr index of the active slide
 */
function indexSetActiveSlide(nbr)
{
    if (nbr &gt;= slides.length)
        nbr = slides.length - 1;
    else if (nbr &lt; 0)
        nbr = 0;

    slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0.5);

    activeSlide = parseInt(nbr);
    window.location.hash = (activeSlide + 1) + '_0';

    slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,1);
}

/** Function to set the page and active slide in index view.
 *
 *  @param nbr index of the active slide
 *
 *  NOTE: To force a redraw,
 *  set INDEX_OFFSET to -1 before calling indexSetPageSlide().
 *
 *  This is necessary for zooming (otherwise the index might not
 *  get redrawn) and when switching to index mode.
 *
 *  INDEX_OFFSET = -1
 *  indexSetPageSlide(activeSlide);
 */
function indexSetPageSlide(nbr)
{
    if (nbr &gt;= slides.length)
        nbr = slides.length - 1;
    else if (nbr &lt; 0)
        nbr = 0;

    //calculate the offset
    var offset = nbr - nbr % (INDEX_COLUMNS * INDEX_COLUMNS);

    if (offset &lt; 0)
        offset = 0;

    //if different from kept offset, then record and change the page
    if (offset != INDEX_OFFSET)
    {
        INDEX_OFFSET = offset;
        displayIndex(INDEX_OFFSET);
    }

    //set the active slide
    indexSetActiveSlide(nbr);
}

/** Event handler for key press.
 *
 *  @param e the event
 */
function keydown(e)
{
    if (!e)
        e = window.event;

    code = e.keyCode || e.charCode;

    if (!processingEffect &amp;&amp; keyCodeDictionary[currentMode] &amp;&amp; keyCodeDictionary[currentMode][code])
        return keyCodeDictionary[currentMode][code]();
    else
        document.onkeypress = keypress;
}
// Set event handler for key down.
document.onkeydown = keydown;

/** Event handler for key press.
 *
 *  @param e the event
 */
function keypress(e)
{
    document.onkeypress = null;

    if (!e)
        e = window.event;

    str = String.fromCharCode(e.keyCode || e.charCode);

    if (!processingEffect &amp;&amp; charCodeDictionary[currentMode] &amp;&amp; charCodeDictionary[currentMode][str])
        return charCodeDictionary[currentMode][str]();
}

/** Function to supply the default char code dictionary.
 *
 * @returns default char code dictionary
 */
function getDefaultCharCodeDictionary()
{
    var charCodeDict = new Object();

    charCodeDict[SLIDE_MODE] = new Object();
    charCodeDict[INDEX_MODE] = new Object();
    charCodeDict[DRAWING_MODE] = new Object();

    charCodeDict[SLIDE_MODE][&quot;i&quot;] = function () { return toggleSlideIndex(); };
    charCodeDict[SLIDE_MODE][&quot;d&quot;] = function () { return slideSwitchToDrawingMode(); };
    charCodeDict[SLIDE_MODE][&quot;D&quot;] = function () { return slideQueryDuration(); };
    charCodeDict[SLIDE_MODE][&quot;n&quot;] = function () { return slideAddSlide(activeSlide); };
    charCodeDict[SLIDE_MODE][&quot;p&quot;] = function () { return slideToggleProgressBarVisibility(); };
    charCodeDict[SLIDE_MODE][&quot;t&quot;] = function () { return slideResetTimer(); };
    charCodeDict[SLIDE_MODE][&quot;e&quot;] = function () { return slideUpdateExportLayer(); };

    charCodeDict[DRAWING_MODE][&quot;d&quot;] = function () { return drawingSwitchToSlideMode(); };
    charCodeDict[DRAWING_MODE][&quot;0&quot;] = function () { return drawingResetPathWidth(); };
    charCodeDict[DRAWING_MODE][&quot;1&quot;] = function () { return drawingSetPathWidth(1.0); };
    charCodeDict[DRAWING_MODE][&quot;3&quot;] = function () { return drawingSetPathWidth(3.0); };
    charCodeDict[DRAWING_MODE][&quot;5&quot;] = function () { return drawingSetPathWidth(5.0); };
    charCodeDict[DRAWING_MODE][&quot;7&quot;] = function () { return drawingSetPathWidth(7.0); };
    charCodeDict[DRAWING_MODE][&quot;9&quot;] = function () { return drawingSetPathWidth(9.0); };
    charCodeDict[DRAWING_MODE][&quot;b&quot;] = function () { return drawingSetPathColour(&quot;blue&quot;); };
    charCodeDict[DRAWING_MODE][&quot;c&quot;] = function () { return drawingSetPathColour(&quot;cyan&quot;); };
    charCodeDict[DRAWING_MODE][&quot;g&quot;] = function () { return drawingSetPathColour(&quot;green&quot;); };
    charCodeDict[DRAWING_MODE][&quot;k&quot;] = function () { return drawingSetPathColour(&quot;black&quot;); };
    charCodeDict[DRAWING_MODE][&quot;m&quot;] = function () { return drawingSetPathColour(&quot;magenta&quot;); };
    charCodeDict[DRAWING_MODE][&quot;o&quot;] = function () { return drawingSetPathColour(&quot;orange&quot;); };
    charCodeDict[DRAWING_MODE][&quot;r&quot;] = function () { return drawingSetPathColour(&quot;red&quot;); };
    charCodeDict[DRAWING_MODE][&quot;w&quot;] = function () { return drawingSetPathColour(&quot;white&quot;); };
    charCodeDict[DRAWING_MODE][&quot;y&quot;] = function () { return drawingSetPathColour(&quot;yellow&quot;); };
    charCodeDict[DRAWING_MODE][&quot;z&quot;] = function () { return drawingUndo(); };

    charCodeDict[INDEX_MODE][&quot;i&quot;] = function () { return toggleSlideIndex(); };
    charCodeDict[INDEX_MODE][&quot;-&quot;] = function () { return indexDecreaseNumberOfColumns(); };
    charCodeDict[INDEX_MODE][&quot;=&quot;] = function () { return indexIncreaseNumberOfColumns(); };
    charCodeDict[INDEX_MODE][&quot;+&quot;] = function () { return indexIncreaseNumberOfColumns(); };
    charCodeDict[INDEX_MODE][&quot;0&quot;] = function () { return indexResetNumberOfColumns(); };

    return charCodeDict;
}

/** Function to supply the default key code dictionary.
 *
 * @returns default key code dictionary
 */
function getDefaultKeyCodeDictionary()
{
    var keyCodeDict = new Object();

    keyCodeDict[SLIDE_MODE] = new Object();
    keyCodeDict[INDEX_MODE] = new Object();
    keyCodeDict[DRAWING_MODE] = new Object();

    keyCodeDict[SLIDE_MODE][LEFT_KEY] = function() { return dispatchEffects(-1); };
    keyCodeDict[SLIDE_MODE][RIGHT_KEY] = function() { return dispatchEffects(1); };
    keyCodeDict[SLIDE_MODE][UP_KEY] = function() { return skipEffects(-1); };
    keyCodeDict[SLIDE_MODE][DOWN_KEY] = function() { return skipEffects(1); };
    keyCodeDict[SLIDE_MODE][PAGE_UP_KEY] = function() { return dispatchEffects(-1); };
    keyCodeDict[SLIDE_MODE][PAGE_DOWN_KEY] = function() { return dispatchEffects(1); };
    keyCodeDict[SLIDE_MODE][HOME_KEY] = function() { return slideSetActiveSlide(0); };
    keyCodeDict[SLIDE_MODE][END_KEY] = function() { return slideSetActiveSlide(slides.length - 1); };
    keyCodeDict[SLIDE_MODE][SPACE_KEY] = function() { return dispatchEffects(1); };

    keyCodeDict[INDEX_MODE][LEFT_KEY] = function() { return indexSetPageSlide(activeSlide - 1); };
    keyCodeDict[INDEX_MODE][RIGHT_KEY] = function() { return indexSetPageSlide(activeSlide + 1); };
    keyCodeDict[INDEX_MODE][UP_KEY] = function() { return indexSetPageSlide(activeSlide - INDEX_COLUMNS); };
    keyCodeDict[INDEX_MODE][DOWN_KEY] = function() { return indexSetPageSlide(activeSlide + INDEX_COLUMNS); };
    keyCodeDict[INDEX_MODE][PAGE_UP_KEY] = function() { return indexSetPageSlide(activeSlide - INDEX_COLUMNS * INDEX_COLUMNS); };
    keyCodeDict[INDEX_MODE][PAGE_DOWN_KEY] = function() { return indexSetPageSlide(activeSlide + INDEX_COLUMNS * INDEX_COLUMNS); };
    keyCodeDict[INDEX_MODE][HOME_KEY] = function() { return indexSetPageSlide(0); };
    keyCodeDict[INDEX_MODE][END_KEY] = function() { return indexSetPageSlide(slides.length - 1); };
    keyCodeDict[INDEX_MODE][ENTER_KEY] = function() { return toggleSlideIndex(); };

    keyCodeDict[DRAWING_MODE][ESCAPE_KEY] = function () { return drawingSwitchToSlideMode(); };

    return keyCodeDict;
}

/** Function to handle all mouse events.
 *
 *    @param    evnt    event
 *    @param    action    type of event (e.g. mouse up, mouse wheel)
 */
function mouseHandlerDispatch(evnt, action)
{
    if (!evnt)
        evnt = window.event;

    var retVal = true;

    if (!processingEffect &amp;&amp; mouseHandlerDictionary[currentMode] &amp;&amp; mouseHandlerDictionary[currentMode][action])
    {
        var subRetVal = mouseHandlerDictionary[currentMode][action](evnt);

        if (subRetVal != null &amp;&amp; subRetVal != undefined)
            retVal = subRetVal;
    }

    if (evnt.preventDefault &amp;&amp; !retVal)
        evnt.preventDefault();

    evnt.returnValue = retVal;

    return retVal;
}

// Set mouse event handler.
document.onmousedown = function(e) { return mouseHandlerDispatch(e, MOUSE_DOWN); };
document.onmouseup = function(e) { return mouseHandlerDispatch(e, MOUSE_UP); };
document.onmousemove = function(e) { return mouseHandlerDispatch(e, MOUSE_MOVE); };

// Moz
if (window.addEventListener)
{
    window.addEventListener('DOMMouseScroll', function(e) { return mouseHandlerDispatch(e, MOUSE_WHEEL); }, false);
}

// Opera Safari OK - may not work in IE
window.onmousewheel = function(e) { return mouseHandlerDispatch(e, MOUSE_WHEEL); };

/** Function to supply the default mouse handler dictionary.
 *
 * @returns default mouse handler dictionary
 */
function getDefaultMouseHandlerDictionary()
{
    var mouseHandlerDict = new Object();

    mouseHandlerDict[SLIDE_MODE] = new Object();
    mouseHandlerDict[INDEX_MODE] = new Object();
    mouseHandlerDict[DRAWING_MODE] = new Object();

    mouseHandlerDict[SLIDE_MODE][MOUSE_DOWN] = function(evnt) { return dispatchEffects(1); };
    mouseHandlerDict[SLIDE_MODE][MOUSE_WHEEL] = function(evnt) { return slideMousewheel(evnt); };

    mouseHandlerDict[INDEX_MODE][MOUSE_DOWN] = function(evnt) { return toggleSlideIndex(); };

    mouseHandlerDict[DRAWING_MODE][MOUSE_DOWN] = function(evnt) { return drawingMousedown(evnt); };
    mouseHandlerDict[DRAWING_MODE][MOUSE_UP] = function(evnt) { return drawingMouseup(evnt); };
    mouseHandlerDict[DRAWING_MODE][MOUSE_MOVE] = function(evnt) { return drawingMousemove(evnt); };

    return mouseHandlerDict;
}

/** Function to switch from slide mode to drawing mode.
*/
function slideSwitchToDrawingMode()
{
    currentMode = DRAWING_MODE;

    var tempDict;

    if (ROOT_NODE.hasAttribute(&quot;style&quot;))
        tempDict = propStrToDict(ROOT_NODE.getAttribute(&quot;style&quot;));
    else
        tempDict = new Object();

    tempDict[&quot;cursor&quot;] = &quot;crosshair&quot;;
    ROOT_NODE.setAttribute(&quot;style&quot;, dictToPropStr(tempDict));
}

/** Function to switch from drawing mode to slide mode.
*/
function drawingSwitchToSlideMode()
{
    currentMode = SLIDE_MODE;

    var tempDict;

    if (ROOT_NODE.hasAttribute(&quot;style&quot;))
        tempDict = propStrToDict(ROOT_NODE.getAttribute(&quot;style&quot;));
    else
        tempDict = new Object();

    tempDict[&quot;cursor&quot;] = &quot;auto&quot;;
    ROOT_NODE.setAttribute(&quot;style&quot;, dictToPropStr(tempDict));
}

/** Function to decrease the number of columns in index mode.
*/
function indexDecreaseNumberOfColumns()
{
    if (INDEX_COLUMNS &gt;= 3)
    {
        INDEX_COLUMNS -= 1;
        INDEX_OFFSET = -1
            indexSetPageSlide(activeSlide);
    }
}

/** Function to increase the number of columns in index mode.
*/
function indexIncreaseNumberOfColumns()
{
    if (INDEX_COLUMNS &lt; 7)
    {
        INDEX_COLUMNS += 1;
        INDEX_OFFSET = -1
            indexSetPageSlide(activeSlide);
    }
}

/** Function to reset the number of columns in index mode.
*/
function indexResetNumberOfColumns()
{
    if (INDEX_COLUMNS != INDEX_COLUMNS_DEFAULT)
    {
        INDEX_COLUMNS = INDEX_COLUMNS_DEFAULT;
        INDEX_OFFSET = -1
            indexSetPageSlide(activeSlide);
    }
}

/** Function to reset path width in drawing mode.
*/
function drawingResetPathWidth()
{
    path_width = path_width_default;
    set_path_paint_width();
}

/** Function to set path width in drawing mode.
 *
 * @param width new path width
 */
function drawingSetPathWidth(width)
{
    path_width = width;
    set_path_paint_width();
}

/** Function to set path colour in drawing mode.
 *
 * @param colour new path colour
 */
function drawingSetPathColour(colour)
{
    path_colour = colour;
}

/** Function to query the duration of the presentation from the user in slide mode.
*/
function slideQueryDuration()
{
    var new_duration = prompt(&quot;Length of presentation in minutes?&quot;, timer_duration);

    if ((new_duration != null) &amp;&amp; (new_duration != ''))
    {
        timer_duration = new_duration;
    }

    updateTimer();
}

/** Function to add new slide in slide mode.
 *
 * @param afterSlide after which slide to insert the new one
 */
function slideAddSlide(afterSlide)
{
    addSlide(afterSlide);
    slideSetActiveSlide(afterSlide + 1);
    updateTimer();
}

/** Function to toggle the visibility of the progress bar in slide mode.
*/
function slideToggleProgressBarVisibility()
{
    if (progress_bar_visible)
    {
        progress_bar_visible = false;
        hideProgressBar();
    }
    else
    {
        progress_bar_visible = true;
        showProgressBar();
    }
}

/** Function to reset the timer in slide mode.
*/
function slideResetTimer()
{
    timer_start = timer_elapsed;
    updateTimer();
}

/** Convenience function to pad a string with zero in front up to a certain length.
 */
function padString(str, len)
{
    var outStr = str;

    while (outStr.length &lt; len)
    {
        outStr = '0' + outStr;
    }

    return outStr;
}

/** Function to update the export layer.
 */
function slideUpdateExportLayer()
{
    // Suspend redraw since we are going to mess with the slides.
    var suspendHandle = ROOT_NODE.suspendRedraw(2000);

    var tmpActiveSlide = activeSlide;
    var tmpActiveEffect = activeEffect;
    var exportedLayers = new Array();

    for (var counterSlides = 0; counterSlides &lt; slides.length; counterSlides++)
    {
        var exportNode;

        setSlideToState(counterSlides, STATE_START);

        var maxEffect = 0;

        if (slides[counterSlides].effects)
        {
            maxEffect = slides[counterSlides].effects.length;
        }

        exportNode = slides[counterSlides].element.cloneNode(true);
        exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
        exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, &quot;slide_&quot; + padString((counterSlides + 1).toString(), slides.length.toString().length) + &quot;_effect_&quot; + padString(&quot;0&quot;, maxEffect.toString().length));

        exportedLayers.push(exportNode);

        if (slides[counterSlides][&quot;effects&quot;])
        {
            for (var counter = 0; counter &lt; slides[counterSlides][&quot;effects&quot;].length; counter++)
            {
                for (var subCounter = 0; subCounter &lt; slides[counterSlides][&quot;effects&quot;][counter].length; subCounter++)
                {
                    var effect = slides[counterSlides][&quot;effects&quot;][counter][subCounter];
                    if (effect[&quot;effect&quot;] == &quot;fade&quot;)
                        fade(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
                        appear(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
                        pop(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;view&quot;)
                        view(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                }

                var layerName = &quot;slide_&quot; + padString((counterSlides + 1).toString(), slides.length.toString().length) + &quot;_effect_&quot; + padString((counter + 1).toString(), maxEffect.toString().length);
                exportNode = slides[counterSlides].element.cloneNode(true);
                exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
                exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, layerName);
                exportNode.setAttribute(&quot;id&quot;, layerName);

                exportedLayers.push(exportNode);
            }
        }
    }

    activeSlide = tmpActiveSlide;
    activeEffect = tmpActiveEffect;
    setSlideToState(activeSlide, activeEffect);

    // Copy image.
    var newDoc = document.documentElement.cloneNode(true);

    // Delete viewbox form new imag and set width and height.
    newDoc.removeAttribute('viewbox');
    newDoc.setAttribute('width', WIDTH);
    newDoc.setAttribute('height', HEIGHT);

    // Delete all layers and script elements.
    var nodesToBeRemoved = new Array();

    for (var childCounter = 0; childCounter &lt;  newDoc.childNodes.length; childCounter++)
    {
        var child = newDoc.childNodes[childCounter];

        if (child.nodeType == 1)
        {
            if ((child.nodeName.toUpperCase() == 'G') || (child.nodeName.toUpperCase() == 'SCRIPT'))
            {
                nodesToBeRemoved.push(child);
            }
        }
    }

    for (var ndCounter = 0; ndCounter &lt; nodesToBeRemoved.length; ndCounter++)
    {
        var nd = nodesToBeRemoved[ndCounter];

        // Before removing the node, check whether it contains any definitions.
        var defs = nd.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;defs&quot;);

        for (var defsCounter = 0; defsCounter &lt; defs.length; defsCounter++)
        {
            if (defs[defsCounter].id)
            {
                newDoc.appendChild(defs[defsCounter].cloneNode(true));
            }
        }

        // Remove node.
        nd.parentNode.removeChild(nd);
    }

    // Set current layer.
    if (exportedLayers[0])
    {
        var namedView;

        for (var nodeCounter = 0; nodeCounter &lt; newDoc.childNodes.length; nodeCounter++)
        {
            if ((newDoc.childNodes[nodeCounter].nodeType == 1) &amp;&amp; (newDoc.childNodes[nodeCounter].getAttribute('id') == 'base'))
            {
                namedView = newDoc.childNodes[nodeCounter];
            }
        }

        if (namedView)
        {
            namedView.setAttributeNS(NSS['inkscape'], 'current-layer', exportedLayers[0].getAttributeNS(NSS['inkscape'], 'label'));
        }
    }

    // Add exported layers.
    while (exportedLayers.length &gt; 0)
    {
        var nd = exportedLayers.pop();

        nd.setAttribute(&quot;opacity&quot;,1);
        nd.style.display = &quot;inherit&quot;;

        newDoc.appendChild(nd);
    }

    // Serialise the new document.
  window.location = 'data:application/svg+xml;base64;charset=utf-8,' + window.btoa(unescape(encodeURIComponent((new XMLSerializer()).serializeToString(newDoc))));

    // Unsuspend redraw.
    ROOT_NODE.unsuspendRedraw(suspendHandle);
    ROOT_NODE.forceRedraw();
}

/** Function to undo last drawing operation.
*/
function drawingUndo()
{
    mouse_presentation_path = null;
    mouse_original_path = null;

    if (history_presentation_elements.length &gt; 0)
    {
        var p = history_presentation_elements.pop();
        var parent = p.parentNode.removeChild(p);

        p = history_original_elements.pop();
        parent = p.parentNode.removeChild(p);
    }
}

/** Event handler for mouse down in drawing mode.
 *
 *  @param e the event
 */
function drawingMousedown(e)
{
    var value = 0;

    if (e.button)
        value = e.button;
    else if (e.which)
        value = e.which;

    if (value == 1)
    {
        history_counter++;

        var p = calcCoord(e);

        mouse_last_x = e.clientX;
        mouse_last_y = e.clientY;
        mouse_original_path = document.createElementNS(NSS[&quot;svg&quot;], &quot;path&quot;);
        mouse_original_path.setAttribute(&quot;stroke&quot;, path_colour);
        mouse_original_path.setAttribute(&quot;stroke-width&quot;, path_paint_width);
        mouse_original_path.setAttribute(&quot;fill&quot;, &quot;none&quot;);
        mouse_original_path.setAttribute(&quot;id&quot;, &quot;path &quot; + Date());
        mouse_original_path.setAttribute(&quot;d&quot;, &quot;M&quot; + p.x + &quot;,&quot; + p.y);
        slides[activeSlide][&quot;original_element&quot;].appendChild(mouse_original_path);
        history_original_elements.push(mouse_original_path);

        mouse_presentation_path = document.createElementNS(NSS[&quot;svg&quot;], &quot;path&quot;);
        mouse_presentation_path.setAttribute(&quot;stroke&quot;, path_colour);
        mouse_presentation_path.setAttribute(&quot;stroke-width&quot;, path_paint_width);
        mouse_presentation_path.setAttribute(&quot;fill&quot;, &quot;none&quot;);
        mouse_presentation_path.setAttribute(&quot;id&quot;, &quot;path &quot; + Date() + &quot; presentation copy&quot;);
        mouse_presentation_path.setAttribute(&quot;d&quot;, &quot;M&quot; + p.x + &quot;,&quot; + p.y);

        if (slides[activeSlide][&quot;viewGroup&quot;])
            slides[activeSlide][&quot;viewGroup&quot;].appendChild(mouse_presentation_path);
        else
            slides[activeSlide][&quot;element&quot;].appendChild(mouse_presentation_path);

        history_presentation_elements.push(mouse_presentation_path);

        return false;
    }

    return true;
}

/** Event handler for mouse up in drawing mode.
 *
 *  @param e the event
 */
function drawingMouseup(e)
{
    if(!e)
        e = window.event;

    if (mouse_presentation_path != null)
    {
        var p = calcCoord(e);
        var d = mouse_presentation_path.getAttribute(&quot;d&quot;);
        d += &quot; L&quot; + p.x + &quot;,&quot; + p.y;
        mouse_presentation_path.setAttribute(&quot;d&quot;, d);
        mouse_presentation_path = null;
        mouse_original_path.setAttribute(&quot;d&quot;, d);
        mouse_original_path = null;

        return false;
    }

    return true;
}

/** Event handler for mouse move in drawing mode.
 *
 *  @param e the event
 */
function drawingMousemove(e)
{
    if(!e)
        e = window.event;

    var dist = (mouse_last_x - e.clientX) * (mouse_last_x - e.clientX) + (mouse_last_y - e.clientY) * (mouse_last_y - e.clientY);

    if (mouse_presentation_path == null)
    {
        return true;
    }

    if (dist &gt;= mouse_min_dist_sqr)
    {
        var p = calcCoord(e);
        var d = mouse_presentation_path.getAttribute(&quot;d&quot;);
        d += &quot; L&quot; + p.x + &quot;,&quot; + p.y;
        mouse_presentation_path.setAttribute(&quot;d&quot;, d);
        mouse_original_path.setAttribute(&quot;d&quot;, d);
        mouse_last_x = e.clientX;
        mouse_last_y = e.clientY;
    }

    return false;
}

/** Event handler for mouse wheel events in slide mode.
 *  based on http://adomas.org/javascript-mouse-wheel/
 *
 *  @param e the event
 */
function slideMousewheel(e)
{
    var delta = 0;

    if (!e)
        e = window.event;

    if (e.wheelDelta)
    { // IE Opera
        delta = e.wheelDelta/120;
    }
    else if (e.detail)
    { // MOZ
        delta = -e.detail/3;
    }

    if (delta &gt; 0)
        skipEffects(-1);
    else if (delta &lt; 0)
        skipEffects(1);

    if (e.preventDefault)
        e.preventDefault();

    e.returnValue = false;
}

/** Event handler for mouse wheel events in index mode.
 *  based on http://adomas.org/javascript-mouse-wheel/
 *
 *  @param e the event
 */
function indexMousewheel(e)
{
    var delta = 0;

    if (!e)
        e = window.event;

    if (e.wheelDelta)
    { // IE Opera
        delta = e.wheelDelta/120;
    }
    else if (e.detail)
    { // MOZ
        delta = -e.detail/3;
    }

    if (delta &gt; 0)
        indexSetPageSlide(activeSlide - INDEX_COLUMNS * INDEX_COLUMNS);
    else if (delta &lt; 0)
        indexSetPageSlide(activeSlide + INDEX_COLUMNS * INDEX_COLUMNS);

    if (e.preventDefault)
        e.preventDefault();

    e.returnValue = false;
}

/** Function to set the path paint width.
*/
function set_path_paint_width()
{
    var svgPoint1 = document.documentElement.createSVGPoint();
    var svgPoint2 = document.documentElement.createSVGPoint();

    svgPoint1.x = 0.0;
    svgPoint1.y = 0.0;
    svgPoint2.x = 1.0;
    svgPoint2.y = 0.0;

    var matrix = slides[activeSlide][&quot;element&quot;].getTransformToElement(ROOT_NODE);

    if (slides[activeSlide][&quot;viewGroup&quot;])
        matrix = slides[activeSlide][&quot;viewGroup&quot;].getTransformToElement(ROOT_NODE);

    svgPoint1 = svgPoint1.matrixTransform(matrix);
    svgPoint2 = svgPoint2.matrixTransform(matrix);

    path_paint_width = path_width / Math.sqrt((svgPoint2.x - svgPoint1.x) * (svgPoint2.x - svgPoint1.x) + (svgPoint2.y - svgPoint1.y) * (svgPoint2.y - svgPoint1.y));
}

/** The view effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect); for the view effect the options need to contain the old and the new matrix.
 */
function view(dir, element, time, options)
{
    var length = 250;
    var fraction;

    if (!options[&quot;matrixInitial&quot;])
    {
        var tempString = slides[activeSlide][&quot;viewGroup&quot;].getAttribute(&quot;transform&quot;);

        if (tempString)
            options[&quot;matrixInitial&quot;] = (new matrixSVG()).fromAttribute(tempString);
        else
            options[&quot;matrixInitial&quot;] = (new matrixSVG()).fromSVGElements(1, 0, 0, 1, 0, 0);
    }

    if ((time == STATE_END) || (time == STATE_START))
        fraction = 1;
    else
    {
        if (options &amp;&amp; options[&quot;length&quot;])
            length = options[&quot;length&quot;];

        fraction = time / length;
    }

    if (dir == 1)
    {
        if (fraction &lt;= 0)
        {
            element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].toAttribute());
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute(&quot;transform&quot;, options[&quot;matrixNew&quot;].toAttribute());

            set_path_paint_width();

            options[&quot;matrixInitial&quot;] = null;
            return true;
        }
        else
        {
            element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].mix(options[&quot;matrixNew&quot;], fraction).toAttribute());
        }
    }
    else if (dir == -1)
    {
        if (fraction &lt;= 0)
        {
            element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].toAttribute());
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute(&quot;transform&quot;, options[&quot;matrixOld&quot;].toAttribute());
            set_path_paint_width();

            options[&quot;matrixInitial&quot;] = null;
            return true;
        }
        else
        {
            element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].mix(options[&quot;matrixOld&quot;], fraction).toAttribute());
        }
    }

    return false;
}

/** The fade effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function fade(dir, element, time, options)
{
    var length = 250;
    var fraction;

    if ((time == STATE_END) || (time == STATE_START))
        fraction = 1;
    else
    {
        if (options &amp;&amp; options[&quot;length&quot;])
            length = options[&quot;length&quot;];

        fraction = time / length;
    }

    if (dir == 1)
    {
        if (fraction &lt;= 0)
        {
            element.style.display = &quot;none&quot;;
            element.setAttribute(&quot;opacity&quot;, 0);
        }
        else if (fraction &gt;= 1)
        {
            element.style.display = &quot;inherit&quot;;
            element.setAttribute(&quot;opacity&quot;, 1);
            return true;
        }
        else
        {
            element.style.display = &quot;inherit&quot;;
            element.setAttribute(&quot;opacity&quot;, fraction);
        }
    }
    else if (dir == -1)
    {
        if (fraction &lt;= 0)
        {
            element.style.display = &quot;inherit&quot;;
            element.setAttribute(&quot;opacity&quot;, 1);
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute(&quot;opacity&quot;, 0);
            element.style.display = &quot;none&quot;;
            return true;
        }
        else
        {
            element.style.display = &quot;inherit&quot;;
            element.setAttribute(&quot;opacity&quot;, 1 - fraction);
        }
    }
    return false;
}

/** The appear effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function appear(dir, element, time, options)
{
    if (dir == 1)
    {
        element.style.display = &quot;inherit&quot;;
        element.setAttribute(&quot;opacity&quot;,1);
    }
    else if (dir == -1)
    {
        element.style.display = &quot;none&quot;;
        element.setAttribute(&quot;opacity&quot;,0);
    }
    return true;
}

/** The pop effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function pop(dir, element, time, options)
{
    var length = 500;
    var fraction;

    if ((time == STATE_END) || (time == STATE_START))
        fraction = 1;
    else
    {
        if (options &amp;&amp; options[&quot;length&quot;])
            length = options[&quot;length&quot;];

        fraction = time / length;
    }

    if (dir == 1)
    {
        if (fraction &lt;= 0)
        {
            element.setAttribute(&quot;opacity&quot;, 0);
            element.setAttribute(&quot;transform&quot;, &quot;scale(0)&quot;);
            element.style.display = &quot;none&quot;;
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute(&quot;opacity&quot;, 1);
            element.removeAttribute(&quot;transform&quot;);
            element.style.display = &quot;inherit&quot;;
            return true;
        }
        else
        {
            element.style.display = &quot;inherit&quot;;
            var opacityFraction = fraction * 3;
            if (opacityFraction &gt; 1)
                opacityFraction = 1;
            element.setAttribute(&quot;opacity&quot;, opacityFraction);
            var offsetX = WIDTH * (1.0 - fraction) / 2.0;
            var offsetY = HEIGHT * (1.0 - fraction) / 2.0;
            element.setAttribute(&quot;transform&quot;, &quot;translate(&quot; + offsetX + &quot;,&quot; + offsetY + &quot;) scale(&quot; + fraction + &quot;)&quot;);
        }
    }
    else if (dir == -1)
    {
        if (fraction &lt;= 0)
        {
            element.setAttribute(&quot;opacity&quot;, 1);
            element.setAttribute(&quot;transform&quot;, &quot;scale(1)&quot;);
            element.style.display = &quot;inherit&quot;;
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute(&quot;opacity&quot;, 0);
            element.removeAttribute(&quot;transform&quot;);
            element.style.display = &quot;none&quot;;
            return true;
        }
        else
        {
            element.setAttribute(&quot;opacity&quot;, 1 - fraction);
            element.setAttribute(&quot;transform&quot;, &quot;scale(&quot; + 1 - fraction + &quot;)&quot;);
            element.style.display = &quot;inherit&quot;;
        }
    }
    return false;
}

/** Function to set a slide either to the start or the end state.
 *
 *  @param slide the slide to use
 *  @param state the state into which the slide should be set
 */
function setSlideToState(slide, state)
{
    slides[slide][&quot;viewGroup&quot;].setAttribute(&quot;transform&quot;, slides[slide].initialView);

    if (slides[slide][&quot;effects&quot;])
    {
        if (state == STATE_END)
        {
            for (var counter = 0; counter &lt; slides[slide][&quot;effects&quot;].length; counter++)
            {
                for (var subCounter = 0; subCounter &lt; slides[slide][&quot;effects&quot;][counter].length; subCounter++)
                {
                    var effect = slides[slide][&quot;effects&quot;][counter][subCounter];
                    if (effect[&quot;effect&quot;] == &quot;fade&quot;)
                        fade(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
                        appear(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
                        pop(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;view&quot;)
                        view(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                }
            }
        }
        else if (state == STATE_START)
        {
            for (var counter = slides[slide][&quot;effects&quot;].length - 1; counter &gt;= 0; counter--)
            {
                for (var subCounter = 0; subCounter &lt; slides[slide][&quot;effects&quot;][counter].length; subCounter++)
                {
                    var effect = slides[slide][&quot;effects&quot;][counter][subCounter];
                    if (effect[&quot;effect&quot;] == &quot;fade&quot;)
                        fade(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
                        appear(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
                        pop(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;view&quot;)
                        view(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);
                }
            }
        }
        else
        {
            setSlideToState(slide, STATE_START);

            for (var counter = 0; counter &lt; slides[slide][&quot;effects&quot;].length &amp;&amp; counter &lt; state; counter++)
            {
                for (var subCounter = 0; subCounter &lt; slides[slide][&quot;effects&quot;][counter].length; subCounter++)
                {
                    var effect = slides[slide][&quot;effects&quot;][counter][subCounter];
                    if (effect[&quot;effect&quot;] == &quot;fade&quot;)
                        fade(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
                        appear(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
                        pop(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;view&quot;)
                        view(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                }
            }
        }
    }

    window.location.hash = (activeSlide + 1) + '_' + activeEffect;
}

/** Convenience function to translate a attribute string into a dictionary.
 *
 *    @param str the attribute string
 *  @return a dictionary
 *  @see dictToPropStr
 */
function propStrToDict(str)
{
    var list = str.split(&quot;;&quot;);
    var obj = new Object();

    for (var counter = 0; counter &lt; list.length; counter++)
    {
        var subStr = list[counter];
        var subList = subStr.split(&quot;:&quot;);
        if (subList.length == 2)
        {
            obj[subList[0]] = subList[1];
        }
    }

    return obj;
}

/** Convenience function to translate a dictionary into a string that can be used as an attribute.
 *
 *  @param dict the dictionary to convert
 *  @return a string that can be used as an attribute
 *  @see propStrToDict
 */
function dictToPropStr(dict)
{
    var str = &quot;&quot;;

    for (var key in dict)
    {
        str += key + &quot;:&quot; + dict[key] + &quot;;&quot;;
    }

    return str;
}

/** Sub-function to add a suffix to the ids of the node and all its children.
 *
 *    @param node the node to change
 *    @param suffix the suffix to add
 *    @param replace dictionary of replaced ids
 *  @see suffixNodeIds
 */
function suffixNoneIds_sub(node, suffix, replace)
{
    if (node.nodeType == 1)
    {
        if (node.getAttribute(&quot;id&quot;))
        {
            var id = node.getAttribute(&quot;id&quot;)
                replace[&quot;#&quot; + id] = id + suffix;
            node.setAttribute(&quot;id&quot;, id + suffix);
        }

        if ((node.nodeName == &quot;use&quot;) &amp;&amp; (node.getAttributeNS(NSS[&quot;xlink&quot;], &quot;href&quot;)) &amp;&amp; (replace[node.getAttribute(NSS[&quot;xlink&quot;], &quot;href&quot;)]))
            node.setAttribute(NSS[&quot;xlink&quot;], &quot;href&quot;, node.getAttribute(NSS[&quot;xlink&quot;], &quot;href&quot;) + suffix);

        if (node.childNodes)
        {
            for (var counter = 0; counter &lt; node.childNodes.length; counter++)
                suffixNoneIds_sub(node.childNodes[counter], suffix, replace);
        }
    }
}

/** Function to add a suffix to the ids of the node and all its children.
 *
 *    @param node the node to change
 *    @param suffix the suffix to add
 *  @return the changed node
 *  @see suffixNodeIds_sub
 */
function suffixNodeIds(node, suffix)
{
    var replace = new Object();

    suffixNoneIds_sub(node, suffix, replace);

    return node;
}

/** Function to build a progress bar.
 *
 *  @param parent node to attach the progress bar to
 */
function createProgressBar(parent_node)
{
    var g = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
    g.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);
    g.setAttribute(&quot;id&quot;, &quot;layer_progress_bar&quot;);
    g.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);

    var rect_progress_bar = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);
    rect_progress_bar.setAttribute(&quot;style&quot;, &quot;marker: none; fill: rgb(128, 128, 128); stroke: none;&quot;);
    rect_progress_bar.setAttribute(&quot;id&quot;, &quot;rect_progress_bar&quot;);
    rect_progress_bar.setAttribute(&quot;x&quot;, 0);
    rect_progress_bar.setAttribute(&quot;y&quot;, 0.99 * HEIGHT);
    rect_progress_bar.setAttribute(&quot;width&quot;, 0);
    rect_progress_bar.setAttribute(&quot;height&quot;, 0.01 * HEIGHT);
    g.appendChild(rect_progress_bar);

    var circle_timer_indicator = document.createElementNS(NSS[&quot;svg&quot;], &quot;circle&quot;);
    circle_timer_indicator.setAttribute(&quot;style&quot;, &quot;marker: none; fill: rgb(255, 0, 0); stroke: none;&quot;);
    circle_timer_indicator.setAttribute(&quot;id&quot;, &quot;circle_timer_indicator&quot;);
    circle_timer_indicator.setAttribute(&quot;cx&quot;, 0.005 * HEIGHT);
    circle_timer_indicator.setAttribute(&quot;cy&quot;, 0.995 * HEIGHT);
    circle_timer_indicator.setAttribute(&quot;r&quot;, 0.005 * HEIGHT);
    g.appendChild(circle_timer_indicator);

    parent_node.appendChild(g);
}

/** Function to hide the progress bar.
 *
 */
function hideProgressBar()
{
    var progress_bar = document.getElementById(&quot;layer_progress_bar&quot;);

    if (!progress_bar)
    {
        return;
    }

    progress_bar.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);
}

/** Function to show the progress bar.
 *
 */
function showProgressBar()
{
    var progress_bar = document.getElementById(&quot;layer_progress_bar&quot;);

    if (!progress_bar)
    {
        return;
    }

    progress_bar.setAttribute(&quot;style&quot;, &quot;display: inherit;&quot;);
}

/** Set progress bar value.
 *
 *    @param value the current slide number
 *
 */
function setProgressBarValue(value)
{
    var rect_progress_bar = document.getElementById(&quot;rect_progress_bar&quot;);

    if (!rect_progress_bar)
    {
        return;
    }

    if (value &lt; 1)
    {
        // First slide, assumed to be the title of the presentation
        var x = 0;
        var w = 0.01 * HEIGHT;
    }
    else if (value &gt;= slides.length - 1)
    {
        // Last slide, assumed to be the end of the presentation
        var x = WIDTH - 0.01 * HEIGHT;
        var w = 0.01 * HEIGHT;
    }
    else
    {
        value -= 1;
        value /= (slides.length - 2);

        var x = WIDTH * value;
        var w = WIDTH / (slides.length - 2);
    }

    rect_progress_bar.setAttribute(&quot;x&quot;, x);
    rect_progress_bar.setAttribute(&quot;width&quot;, w);
}

/** Set time indicator.
 *
 *    @param value the percentage of time elapse so far between 0.0 and 1.0
 *
 */
function setTimeIndicatorValue(value)
{
    var circle_timer_indicator = document.getElementById(&quot;circle_timer_indicator&quot;);

    if (!circle_timer_indicator)
    {
        return;
    }

    if (value &lt; 0.0)
    {
        value = 0.0;
    }

    if (value &gt; 1.0)
    {
        value = 1.0;
    }

    var cx = (WIDTH - 0.01 * HEIGHT) * value + 0.005 * HEIGHT;
    circle_timer_indicator.setAttribute(&quot;cx&quot;, cx);
}

/** Update timer.
 *
 */
function updateTimer()
{
    timer_elapsed += 1;
    setTimeIndicatorValue((timer_elapsed - timer_start) / (60 * timer_duration));
}

/** Convert screen coordinates to document coordinates.
 *
 *  @param e event with screen coordinates
 *
 *  @return coordinates in SVG file coordinate system
 */
function calcCoord(e)
{
    var svgPoint = document.documentElement.createSVGPoint();
    svgPoint.x = e.clientX + window.pageXOffset;
    svgPoint.y = e.clientY + window.pageYOffset;

    var matrix = slides[activeSlide][&quot;element&quot;].getScreenCTM();

    if (slides[activeSlide][&quot;viewGroup&quot;])
        matrix = slides[activeSlide][&quot;viewGroup&quot;].getScreenCTM();

    svgPoint = svgPoint.matrixTransform(matrix.inverse());
    return svgPoint;
}

/** Add slide.
 *
 *    @param after_slide after which slide the new slide should be inserted into the presentation
 */
function addSlide(after_slide)
{
    number_of_added_slides++;

    var g = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
    g.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);
    g.setAttribute(&quot;id&quot;, &quot;Whiteboard &quot; + Date() + &quot; presentation copy&quot;);
    g.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);

    var new_slide = new Object();
    new_slide[&quot;element&quot;] = g;

    // Set build in transition.
    new_slide[&quot;transitionIn&quot;] = new Object();
    var dict = defaultTransitionInDict;
    new_slide[&quot;transitionIn&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
    new_slide[&quot;transitionIn&quot;][&quot;options&quot;] = new Object();

    for (key in dict)
        if (key != &quot;name&quot;)
            new_slide[&quot;transitionIn&quot;][&quot;options&quot;][key] = dict[key];

    // Set build out transition.
    new_slide[&quot;transitionOut&quot;] = new Object();
    dict = defaultTransitionOutDict;
    new_slide[&quot;transitionOut&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
    new_slide[&quot;transitionOut&quot;][&quot;options&quot;] = new Object();

    for (key in dict)
        if (key != &quot;name&quot;)
            new_slide[&quot;transitionOut&quot;][&quot;options&quot;][key] = dict[key];

    // Copy master slide content.
    if (masterSlide)
    {
        var clonedNode = suffixNodeIds(masterSlide.cloneNode(true), &quot;_&quot; + Date() + &quot; presentation_copy&quot;);
        clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;);
        clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;);
        clonedNode.style.display = &quot;inherit&quot;;

        g.appendChild(clonedNode);
    }

    // Substitute auto texts.
    substituteAutoTexts(g, &quot;Whiteboard &quot; + number_of_added_slides, &quot;W&quot; + number_of_added_slides, slides.length);

    g.setAttribute(&quot;onmouseover&quot;, &quot;if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != &quot; + (after_slide + 1) + &quot;)) { indexSetActiveSlide(&quot; + (after_slide + 1) + &quot;); };&quot;);

    // Create a transform group.
    var transformGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

    // Add content to transform group.
    while (g.firstChild)
        transformGroup.appendChild(g.firstChild);

    // Transfer the transform attribute from the node to the transform group.
    if (g.getAttribute(&quot;transform&quot;))
    {
        transformGroup.setAttribute(&quot;transform&quot;, g.getAttribute(&quot;transform&quot;));
        g.removeAttribute(&quot;transform&quot;);
    }

    // Create a view group.
    var viewGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

    viewGroup.appendChild(transformGroup);
    new_slide[&quot;viewGroup&quot;] = g.appendChild(viewGroup);

    // Insert background.
    if (BACKGROUND_COLOR != null)
    {
        var rectNode = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);

        rectNode.setAttribute(&quot;x&quot;, 0);
        rectNode.setAttribute(&quot;y&quot;, 0);
        rectNode.setAttribute(&quot;width&quot;, WIDTH);
        rectNode.setAttribute(&quot;height&quot;, HEIGHT);
        rectNode.setAttribute(&quot;id&quot;, &quot;jessyInkBackground&quot; + Date());
        rectNode.setAttribute(&quot;fill&quot;, BACKGROUND_COLOR);

        new_slide[&quot;viewGroup&quot;].insertBefore(rectNode, new_slide[&quot;viewGroup&quot;].firstChild);
    }

    // Set initial view even if there are no other views.
    var matrixOld = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);

    new_slide[&quot;viewGroup&quot;].setAttribute(&quot;transform&quot;, matrixOld.toAttribute());
    new_slide.initialView = matrixOld.toAttribute();

    // Insert slide
    var node = slides[after_slide][&quot;element&quot;];
    var next_node = node.nextSibling;
    var parent_node = node.parentNode;

    if (next_node)
    {
        parent_node.insertBefore(g, next_node);
    }
    else
    {
        parent_node.appendChild(g);
    }

    g = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
    g.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
    g.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, &quot;Whiteboard &quot; + number_of_added_slides);
    g.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);
    g.setAttribute(&quot;id&quot;, &quot;Whiteboard &quot; + Date());
    g.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);

    new_slide[&quot;original_element&quot;] = g;

    node = slides[after_slide][&quot;original_element&quot;];
    next_node = node.nextSibling;
    parent_node = node.parentNode;

    if (next_node)
    {
        parent_node.insertBefore(g, next_node);
    }
    else
    {
        parent_node.appendChild(g);
    }

    before_new_slide = slides.slice(0, after_slide + 1);
    after_new_slide = slides.slice(after_slide + 1);
    slides = before_new_slide.concat(new_slide, after_new_slide);

    //resetting the counter attributes on the slides that follow the new slide...
    for (var counter = after_slide+2; counter &lt; slides.length; counter++)
    {
        slides[counter][&quot;element&quot;].setAttribute(&quot;onmouseover&quot;, &quot;if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != &quot; + counter + &quot;)) { indexSetActiveSlide(&quot; + counter + &quot;); };&quot;);
    }
}

/** Convenience function to obtain a transformation matrix from a point matrix.
 *
 *    @param mPoints Point matrix.
 *    @return A transformation matrix.
 */
function pointMatrixToTransformation(mPoints)
{
    mPointsOld = (new matrixSVG()).fromElements(0, WIDTH, WIDTH, 0, 0, HEIGHT, 1, 1, 1);

    return mPointsOld.mult(mPoints.inv());
}

/** Convenience function to obtain a matrix with three corners of a rectangle.
 *
 *    @param rect an svg rectangle
 *    @return a matrixSVG containing three corners of the rectangle
 */
function rectToMatrix(rect)
{
    rectWidth = rect.getBBox().width;
    rectHeight = rect.getBBox().height;
    rectX = rect.getBBox().x;
    rectY = rect.getBBox().y;
    rectXcorr = 0;
    rectYcorr = 0;

    scaleX = WIDTH / rectWidth;
    scaleY = HEIGHT / rectHeight;

    if (scaleX &gt; scaleY)
    {
        scaleX = scaleY;
        rectXcorr -= (WIDTH / scaleX - rectWidth) / 2;
        rectWidth = WIDTH / scaleX;
    }
    else
    {
        scaleY = scaleX;
        rectYcorr -= (HEIGHT / scaleY - rectHeight) / 2;
        rectHeight = HEIGHT / scaleY;
    }

    if (rect.transform.baseVal.numberOfItems &lt; 1)
    {
        mRectTrans = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);
    }
    else
    {
        mRectTrans = (new matrixSVG()).fromSVGMatrix(rect.transform.baseVal.consolidate().matrix);
    }

    newBasePoints = (new matrixSVG()).fromElements(rectX, rectX, rectX, rectY, rectY, rectY, 1, 1, 1);
    newVectors = (new matrixSVG()).fromElements(rectXcorr, rectXcorr + rectWidth, rectXcorr + rectWidth, rectYcorr, rectYcorr, rectYcorr + rectHeight, 0, 0, 0);

    return mRectTrans.mult(newBasePoints.add(newVectors));
}

/** Function to handle JessyInk elements.
 *
 *    @param    node    Element node.
 */
function handleElement(node)
{
    if (node.getAttributeNS(NSS['jessyink'], 'element') == 'core.video')
    {
        var url;
        var width;
        var height;
        var x;
        var y;
        var transform;

        var tspans = node.getElementsByTagNameNS(&quot;http://www.w3.org/2000/svg&quot;, &quot;tspan&quot;);

        for (var tspanCounter = 0; tspanCounter &lt; tspans.length; tspanCounter++)
        {
            if (tspans[tspanCounter].getAttributeNS(&quot;https://launchpad.net/jessyink&quot;, &quot;video&quot;) == &quot;url&quot;)
            {
                url = tspans[tspanCounter].firstChild.nodeValue;
            }
        }

        var rects = node.getElementsByTagNameNS(&quot;http://www.w3.org/2000/svg&quot;, &quot;rect&quot;);

        for (var rectCounter = 0; rectCounter &lt; rects.length; rectCounter++)
        {
            if (rects[rectCounter].getAttributeNS(&quot;https://launchpad.net/jessyink&quot;, &quot;video&quot;) == &quot;rect&quot;)
            {
                x = rects[rectCounter].getAttribute(&quot;x&quot;);
                y = rects[rectCounter].getAttribute(&quot;y&quot;);
                width = rects[rectCounter].getAttribute(&quot;width&quot;);
                height = rects[rectCounter].getAttribute(&quot;height&quot;);
                transform = rects[rectCounter].getAttribute(&quot;transform&quot;);
            }
        }

        for (var childCounter = 0; childCounter &lt; node.childNodes.length; childCounter++)
        {
            if (node.childNodes[childCounter].nodeType == 1)
            {
                if (node.childNodes[childCounter].style)
                {
                    node.childNodes[childCounter].style.display = 'none';
                }
                else
                {
                    node.childNodes[childCounter].setAttribute(&quot;style&quot;, &quot;display: none;&quot;);
                }
            }
        }

        var foreignNode = document.createElementNS(&quot;http://www.w3.org/2000/svg&quot;, &quot;foreignObject&quot;);
        foreignNode.setAttribute(&quot;x&quot;, x);
        foreignNode.setAttribute(&quot;y&quot;, y);
        foreignNode.setAttribute(&quot;width&quot;, width);
        foreignNode.setAttribute(&quot;height&quot;, height);
        foreignNode.setAttribute(&quot;transform&quot;, transform);

        var videoNode = document.createElementNS(&quot;http://www.w3.org/1999/xhtml&quot;, &quot;video&quot;);
        videoNode.setAttribute(&quot;src&quot;, url);

        foreignNode.appendChild(videoNode);
        node.appendChild(foreignNode);
    }
}

/** Class processing the location hash.
 *
 *    @param str location hash
 */
function LocationHash(str)
{
    this.slideNumber = 0;
    this.effectNumber = 0;

    str = str.substr(1, str.length - 1);

    var parts = str.split('_');

    // Try to extract slide number.
    if (parts.length &gt;= 1)
    {
        try
        {
            var slideNumber = parseInt(parts[0]);

            if (!isNaN(slideNumber))
            {
                this.slideNumber = slideNumber - 1;
            }
        }
        catch (e)
        {
        }
    }

    // Try to extract effect number.
    if (parts.length &gt;= 2)
    {
        try
        {
            var effectNumber = parseInt(parts[1]);

            if (!isNaN(effectNumber))
            {
                this.effectNumber = effectNumber;
            }
        }
        catch (e)
        {
        }
    }
}

/** Class representing an svg matrix.
*/
function matrixSVG()
{
    this.e11 = 0; // a
    this.e12 = 0; // c
    this.e13 = 0; // e
    this.e21 = 0; // b
    this.e22 = 0; // d
    this.e23 = 0; // f
    this.e31 = 0;
    this.e32 = 0;
    this.e33 = 0;
}

/** Constructor function.
 *
 *    @param a element a (i.e. 1, 1) as described in the svg standard.
 *    @param b element b (i.e. 2, 1) as described in the svg standard.
 *    @param c element c (i.e. 1, 2) as described in the svg standard.
 *    @param d element d (i.e. 2, 2) as described in the svg standard.
 *    @param e element e (i.e. 1, 3) as described in the svg standard.
 *    @param f element f (i.e. 2, 3) as described in the svg standard.
 */
matrixSVG.prototype.fromSVGElements = function(a, b, c, d, e, f)
{
    this.e11 = a;
    this.e12 = c;
    this.e13 = e;
    this.e21 = b;
    this.e22 = d;
    this.e23 = f;
    this.e31 = 0;
    this.e32 = 0;
    this.e33 = 1;

    return this;
}

/** Constructor function.
 *
 *    @param matrix an svg matrix as described in the svg standard.
 */
matrixSVG.prototype.fromSVGMatrix = function(m)
{
    this.e11 = m.a;
    this.e12 = m.c;
    this.e13 = m.e;
    this.e21 = m.b;
    this.e22 = m.d;
    this.e23 = m.f;
    this.e31 = 0;
    this.e32 = 0;
    this.e33 = 1;

    return this;
}

/** Constructor function.
 *
 *    @param e11 element 1, 1 of the matrix.
 *    @param e12 element 1, 2 of the matrix.
 *    @param e13 element 1, 3 of the matrix.
 *    @param e21 element 2, 1 of the matrix.
 *    @param e22 element 2, 2 of the matrix.
 *    @param e23 element 2, 3 of the matrix.
 *    @param e31 element 3, 1 of the matrix.
 *    @param e32 element 3, 2 of the matrix.
 *    @param e33 element 3, 3 of the matrix.
 */
matrixSVG.prototype.fromElements = function(e11, e12, e13, e21, e22, e23, e31, e32, e33)
{
    this.e11 = e11;
    this.e12 = e12;
    this.e13 = e13;
    this.e21 = e21;
    this.e22 = e22;
    this.e23 = e23;
    this.e31 = e31;
    this.e32 = e32;
    this.e33 = e33;

    return this;
}

/** Constructor function.
 *
 *    @param attrString string value of the &quot;transform&quot; attribute (currently only &quot;matrix&quot; is accepted)
 */
matrixSVG.prototype.fromAttribute = function(attrString)
{
    str = attrString.substr(7, attrString.length - 8);

    str = str.trim();

    strArray = str.split(&quot;,&quot;);

    // Opera does not use commas to separate the values of the matrix, only spaces.
    if (strArray.length != 6)
        strArray = str.split(&quot; &quot;);

    this.e11 = parseFloat(strArray[0]);
    this.e21 = parseFloat(strArray[1]);
    this.e31 = 0;
    this.e12 = parseFloat(strArray[2]);
    this.e22 = parseFloat(strArray[3]);
    this.e32 = 0;
    this.e13 = parseFloat(strArray[4]);
    this.e23 = parseFloat(strArray[5]);
    this.e33 = 1;

    return this;
}

/** Output function
 *
 *    @return a string that can be used as the &quot;transform&quot; attribute.
 */
matrixSVG.prototype.toAttribute = function()
{
    return &quot;matrix(&quot; + this.e11 + &quot;, &quot; + this.e21 + &quot;, &quot; + this.e12 + &quot;, &quot; + this.e22 + &quot;, &quot; + this.e13 + &quot;, &quot; + this.e23 + &quot;)&quot;;
}

/** Matrix nversion.
 *
 *    @return the inverse of the matrix
 */
matrixSVG.prototype.inv = function()
{
    out = new matrixSVG();

    det = this.e11 * (this.e33 * this.e22 - this.e32 * this.e23) - this.e21 * (this.e33 * this.e12 - this.e32 * this.e13) + this.e31 * (this.e23 * this.e12 - this.e22 * this.e13);

    out.e11 =  (this.e33 * this.e22 - this.e32 * this.e23) / det;
    out.e12 = -(this.e33 * this.e12 - this.e32 * this.e13) / det;
    out.e13 =  (this.e23 * this.e12 - this.e22 * this.e13) / det;
    out.e21 = -(this.e33 * this.e21 - this.e31 * this.e23) / det;
    out.e22 =  (this.e33 * this.e11 - this.e31 * this.e13) / det;
    out.e23 = -(this.e23 * this.e11 - this.e21 * this.e13) / det;
    out.e31 =  (this.e32 * this.e21 - this.e31 * this.e22) / det;
    out.e32 = -(this.e32 * this.e11 - this.e31 * this.e12) / det;
    out.e33 =  (this.e22 * this.e11 - this.e21 * this.e12) / det;

    return out;
}

/** Matrix multiplication.
 *
 *    @param op another svg matrix
 *    @return this * op
 */
matrixSVG.prototype.mult = function(op)
{
    out = new matrixSVG();

    out.e11 = this.e11 * op.e11 + this.e12 * op.e21 + this.e13 * op.e31;
    out.e12 = this.e11 * op.e12 + this.e12 * op.e22 + this.e13 * op.e32;
    out.e13 = this.e11 * op.e13 + this.e12 * op.e23 + this.e13 * op.e33;
    out.e21 = this.e21 * op.e11 + this.e22 * op.e21 + this.e23 * op.e31;
    out.e22 = this.e21 * op.e12 + this.e22 * op.e22 + this.e23 * op.e32;
    out.e23 = this.e21 * op.e13 + this.e22 * op.e23 + this.e23 * op.e33;
    out.e31 = this.e31 * op.e11 + this.e32 * op.e21 + this.e33 * op.e31;
    out.e32 = this.e31 * op.e12 + this.e32 * op.e22 + this.e33 * op.e32;
    out.e33 = this.e31 * op.e13 + this.e32 * op.e23 + this.e33 * op.e33;

    return out;
}

/** Matrix addition.
 *
 *    @param op another svg matrix
 *    @return this + op
 */
matrixSVG.prototype.add = function(op)
{
    out = new matrixSVG();

    out.e11 = this.e11 + op.e11;
    out.e12 = this.e12 + op.e12;
    out.e13 = this.e13 + op.e13;
    out.e21 = this.e21 + op.e21;
    out.e22 = this.e22 + op.e22;
    out.e23 = this.e23 + op.e23;
    out.e31 = this.e31 + op.e31;
    out.e32 = this.e32 + op.e32;
    out.e33 = this.e33 + op.e33;

    return out;
}

/** Matrix mixing.
 *
 *    @param op another svg matrix
 *    @parma contribOp contribution of the other matrix (0 &lt;= contribOp &lt;= 1)
 *    @return (1 - contribOp) * this + contribOp * op
 */
matrixSVG.prototype.mix = function(op, contribOp)
{
    contribThis = 1.0 - contribOp;
    out = new matrixSVG();

    out.e11 = contribThis * this.e11 + contribOp * op.e11;
    out.e12 = contribThis * this.e12 + contribOp * op.e12;
    out.e13 = contribThis * this.e13 + contribOp * op.e13;
    out.e21 = contribThis * this.e21 + contribOp * op.e21;
    out.e22 = contribThis * this.e22 + contribOp * op.e22;
    out.e23 = contribThis * this.e23 + contribOp * op.e23;
    out.e31 = contribThis * this.e31 + contribOp * op.e31;
    out.e32 = contribThis * this.e32 + contribOp * op.e32;
    out.e33 = contribThis * this.e33 + contribOp * op.e33;

    return out;
}

/** Trimming function for strings.
*/
String.prototype.trim = function()
{
    return this.replace(/^\s+|\s+$/g, '');
}

/** SVGElement.getTransformToElement polyfill */
SVGElement.prototype.getTransformToElement = SVGElement.prototype.getTransformToElement || function(elem) {
    return elem.getScreenCTM().inverse().multiply(this.getScreenCTM());
};
</script>
  <metadata
     id="metadata14">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:title>Logo michzuerch@gmail.com</dc:title>
        <dc:date>1.1.2024</dc:date>
        <dc:creator>
          <cc:Agent>
            <dc:title>michzuerch</dc:title>
          </cc:Agent>
        </dc:creator>
        <cc:license
           rdf:resource="http://creativecommons.org/publicdomain/zero/1.0/" />
      </cc:Work>
      <cc:License
         rdf:about="http://creativecommons.org/publicdomain/zero/1.0/">
        <cc:permits
           rdf:resource="http://creativecommons.org/ns#Reproduction" />
        <cc:permits
           rdf:resource="http://creativecommons.org/ns#Distribution" />
        <cc:permits
           rdf:resource="http://creativecommons.org/ns#DerivativeWorks" />
      </cc:License>
    </rdf:RDF>
  </metadata>
</svg>
